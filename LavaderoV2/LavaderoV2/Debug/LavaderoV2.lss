
LavaderoV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000bb0  00000c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800212  00800212  00000c56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b76  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101a  00000000  00000000  00002aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011a2  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00004c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000945  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ca  00000000  00000000  00005af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00005ec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_1>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_9>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_32>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_42>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_47>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 eb       	ldi	r30, 0xB0	; 176
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 31       	cpi	r26, 0x12	; 18
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a2 e1       	ldi	r26, 0x12	; 18
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ae 32       	cpi	r26, 0x2E	; 46
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
 11a:	0c 94 d6 05 	jmp	0xbac	; 0xbac <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setupVariablesGeneral>:
	}
	
	// NumCarSecado
	uint8_t getNumCarSecado(void){ // Devuelve número coches en lavadero
		return NumCarSecado;
	}
 122:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <Stop>
 126:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <s>
 12a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <s+0x1>
 12e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <s+0x2>
 132:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <s+0x3>
 136:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <ms>
 13a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <ms+0x1>
 13e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <ms+0x2>
 142:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <ms+0x3>
 146:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <NumCarSecado>
 14a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <NumCarLavado>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <EnableEntrance>
 154:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <enable_prove_new>
 158:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <cnt_prove_new>
 15c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <cnt_prove_new+0x1>
 160:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <cnt_prove_new+0x2>
 164:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <cnt_prove_new+0x3>
 168:	08 95       	ret

0000016a <setupTimers>:
 16a:	f8 94       	cli
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
 172:	82 e1       	ldi	r24, 0x12	; 18
 174:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
 178:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	96 e0       	ldi	r25, 0x06	; 6
 180:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
 188:	8f e5       	ldi	r24, 0x5F	; 95
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f008b>
 190:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f008a>
 194:	8f e7       	ldi	r24, 0x7F	; 127
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7f008d>
 19c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7f008c>
 1a0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f00a0>
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f00a1>
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7f0072>
 1b0:	21 e1       	ldi	r18, 0x11	; 17
 1b2:	3a e7       	ldi	r19, 0x7A	; 122
 1b4:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f00a9>
 1b8:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f00a8>
 1bc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f0090>
 1c0:	9a e0       	ldi	r25, 0x0A	; 10
 1c2:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
 1c6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f0071>
 1ca:	87 ee       	ldi	r24, 0xE7	; 231
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f0099>
 1d2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f0098>
 1d6:	78 94       	sei
 1d8:	08 95       	ret

000001da <incNumCarLavado>:
 1da:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <NumCarLavado>
 1e4:	08 95       	ret

000001e6 <decNumCarLavado>:
 1e6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 1ea:	88 23       	and	r24, r24
 1ec:	29 f0       	breq	.+10     	; 0x1f8 <decNumCarLavado+0x12>
 1ee:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 1f2:	81 50       	subi	r24, 0x01	; 1
 1f4:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <NumCarLavado>
 1f8:	08 95       	ret

000001fa <incNumCarSecado>:

	void incNumCarSecado(void){ // Incrementa en uno el contador de coches en lavadero
		NumCarSecado++;
 1fa:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <NumCarSecado>
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <NumCarSecado>
 204:	08 95       	ret

00000206 <decNumCarSecado>:
	}

	void decNumCarSecado(void){ // Decrementa en uno el contador de coches en lavadero
		if(NumCarSecado > 0) {
 206:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <NumCarSecado>
 20a:	88 23       	and	r24, r24
 20c:	29 f0       	breq	.+10     	; 0x218 <decNumCarSecado+0x12>
			NumCarSecado--;
 20e:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <NumCarSecado>
 212:	81 50       	subi	r24, 0x01	; 1
 214:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <NumCarSecado>
 218:	08 95       	ret

0000021a <setup_General>:
///////////////////////////////////
////// INICIALIZACIÓN COMÚN ///////
///////////////////////////////////

void setup_General(void){ //Incluir todas funciones inicialización
	setupVariablesGeneral();
 21a:	0e 94 91 00 	call	0x122	; 0x122 <setupVariablesGeneral>
	setupTimers();
 21e:	0e 94 b5 00 	call	0x16a	; 0x16a <setupTimers>
 222:	08 95       	ret

00000224 <setup_sensores_integration>:

	
	 
	 sei();*/
	 
	 cli();
 224:	f8 94       	cli
	 //SO1 [SOB] PB0(PCINT0)
	 clearBit(REG_SOB_DDR, PIN_SO1_DDR); // Entrada
 226:	84 b1       	in	r24, 0x04	; 4
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	84 b9       	out	0x04, r24	; 4
	 // Configuro interrupción por cambio PCINT0
	 setBit(PCMSK0, PCINT0); // Habilito mascara interrupción
 22c:	eb e6       	ldi	r30, 0x6B	; 107
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 83       	st	Z, r24
	 setBit(PCICR, PCIE0); // Habilito registro interrupción
 236:	a8 e6       	ldi	r26, 0x68	; 104
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	8c 91       	ld	r24, X
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	8c 93       	st	X, r24
	 setBit(PCIFR, PCIF0); // Borro bandera
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	81 60       	ori	r24, 0x01	; 1
 244:	8b bb       	out	0x1b, r24	; 27

	 //SO3 [SOB] PB1(PCINT1)
	 clearBit(REG_SOB_DDR, PIN_SO3_DDR); // Entrada
 246:	84 b1       	in	r24, 0x04	; 4
 248:	8d 7f       	andi	r24, 0xFD	; 253
 24a:	84 b9       	out	0x04, r24	; 4
	 // Configura interrupción por cambio PCINT1 junto PCINT0
	 setBit(PCMSK0, PCINT1); // Habilito mascara interrupción
 24c:	80 81       	ld	r24, Z
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	80 83       	st	Z, r24
	 
	 //SO6 [SOB] (PCINT4)
	 clearBit(REG_SOB_DDR, PIN_SO6_DDR); // Entrada
 252:	84 b1       	in	r24, 0x04	; 4
 254:	8f 7e       	andi	r24, 0xEF	; 239
 256:	84 b9       	out	0x04, r24	; 4
	 // Configura interrupción por cambio PCINT4 junto PCINT0
	 setBit(PCMSK0, PCINT4); // Habilito mascara interrupción
 258:	80 81       	ld	r24, Z
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	80 83       	st	Z, r24

	 //SO10 [SOB] PB5
	 clearBit(REG_SOB_DDR, PIN_SO10_DDR); // Entrada
 25e:	84 b1       	in	r24, 0x04	; 4
 260:	8f 7d       	andi	r24, 0xDF	; 223
 262:	84 b9       	out	0x04, r24	; 4
	 // Configura interrupción por cambio PCINT5 junto PCINT0
	 setBit(PCMSK0, PCINT5); // Habilito mascara interrupción
 264:	80 81       	ld	r24, Z
 266:	80 62       	ori	r24, 0x20	; 32
 268:	80 83       	st	Z, r24

	 //SO12 [SOB] PB2 (PCINT2)
	 clearBit(REG_SOB_DDR, PIN_SO12_DDR); // Entrada
 26a:	84 b1       	in	r24, 0x04	; 4
 26c:	8b 7f       	andi	r24, 0xFB	; 251
 26e:	84 b9       	out	0x04, r24	; 4
	 // Configura interrupción por cambio PCINT2 junto PCINT0
	 setBit(PCMSK0, PCINT2); // Habilito mascara interrupción
 270:	80 81       	ld	r24, Z
 272:	84 60       	ori	r24, 0x04	; 4
 274:	80 83       	st	Z, r24
	 
	  //SO12 [SOB] PB2 (PCINT2)
	  clearBit(REG_SOB_DDR, PIN_SO12_DDR); // Entrada
 276:	84 b1       	in	r24, 0x04	; 4
 278:	8b 7f       	andi	r24, 0xFB	; 251
 27a:	84 b9       	out	0x04, r24	; 4
	  // Configura interrupción por cambio PCINT2 junto PCINT0
	  setBit(PCMSK0, PCINT2); // Habilito mascara interrupción
 27c:	80 81       	ld	r24, Z
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	80 83       	st	Z, r24
	 
	 sei();
 282:	78 94       	sei
 284:	08 95       	ret

00000286 <setup_Integration>:
  ///////////////////
  ////// COMÚN///////
  ///////////////////
  
   void setup_Integration(){
	   setup_sensores_integration();
 286:	0e 94 12 01 	call	0x224	; 0x224 <setup_sensores_integration>
 28a:	08 95       	ret

0000028c <__vector_42>:

 ////////////////////////////////////////////////
 ////// INTERRUPCIONES TIMERS INTEGRACIÓN ///////
 ////////////////////////////////////////////////
 
 ISR(TIMER4_COMPA_vect){ // Segundos
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
	 s++;
 2a6:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <s>
 2aa:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <s+0x1>
 2ae:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <s+0x2>
 2b2:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <s+0x3>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	a1 1d       	adc	r26, r1
 2ba:	b1 1d       	adc	r27, r1
 2bc:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <s>
 2c0:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <s+0x1>
 2c4:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <s+0x2>
 2c8:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <s+0x3>
	 
	 if ((s - cnt_prove_new > Tiempo_prove_new) && NumCarLavado > 0 && enable_prove_new == 1){
 2cc:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <s>
 2d0:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <s+0x1>
 2d4:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <s+0x2>
 2d8:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <s+0x3>
 2dc:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <cnt_prove_new>
 2e0:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <cnt_prove_new+0x1>
 2e4:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <cnt_prove_new+0x2>
 2e8:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <cnt_prove_new+0x3>
 2ec:	84 1b       	sub	r24, r20
 2ee:	95 0b       	sbc	r25, r21
 2f0:	a6 0b       	sbc	r26, r22
 2f2:	b7 0b       	sbc	r27, r23
 2f4:	c9 97       	sbiw	r24, 0x39	; 57
 2f6:	a1 05       	cpc	r26, r1
 2f8:	b1 05       	cpc	r27, r1
 2fa:	70 f0       	brcs	.+28     	; 0x318 <__vector_42+0x8c>
 2fc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 300:	88 23       	and	r24, r24
 302:	51 f0       	breq	.+20     	; 0x318 <__vector_42+0x8c>
 304:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <enable_prove_new>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	31 f4       	brne	.+12     	; 0x318 <__vector_42+0x8c>
		 NumCarLavado = 0;
 30c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <NumCarLavado>
		 EnableEntrance = 1;
 310:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <EnableEntrance>
		 enable_prove_new = 0;
 314:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <enable_prove_new>
	 }
 }
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_32>:

 ISR(TIMER3_COMPA_vect){ // Milisegundos
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	 ms++;
 354:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <ms>
 358:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <ms+0x1>
 35c:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <ms+0x2>
 360:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <ms+0x3>
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	a1 1d       	adc	r26, r1
 368:	b1 1d       	adc	r27, r1
 36a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <ms>
 36e:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <ms+0x1>
 372:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <ms+0x2>
 376:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <ms+0x3>
	 
	 if(ms % Check_height_sensors == 0){
 37a:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <ms>
 37e:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <ms+0x1>
 382:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <ms+0x2>
 386:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <ms+0x3>
 38a:	2e e1       	ldi	r18, 0x1E	; 30
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	0e 94 b4 05 	call	0xb68	; 0xb68 <__udivmodsi4>
 396:	67 2b       	or	r22, r23
 398:	68 2b       	or	r22, r24
 39a:	69 2b       	or	r22, r25
 39c:	51 f5       	brne	.+84     	; 0x3f2 <__vector_32+0xc0>
		enable_check_parte1 = 1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <enable_check_parte1>
		
		// Actualizo señales - Lavadero Horizontal
		so3 = isBitSet(REG_SOB_PIN,PIN_SO3_PIN);
 3a4:	93 b1       	in	r25, 0x03	; 3
 3a6:	92 70       	andi	r25, 0x02	; 2
 3a8:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <so3>
		so4 = isBitSet(REG_SOK_PIN,PIN_SO4_PIN);
 3ac:	e6 e0       	ldi	r30, 0x06	; 6
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	90 81       	ld	r25, Z
 3b2:	90 72       	andi	r25, 0x20	; 32
 3b4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <so4>
		so5 = isBitSet(REG_SOK_PIN,PIN_SO5_PIN);
 3b8:	90 81       	ld	r25, Z
 3ba:	92 70       	andi	r25, 0x02	; 2
 3bc:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <so5>
		limit_switch_lavH = isClrSet(REG_SW_PIN,PIN_SW2_PIN); // isClrSet porque SW2 '0' al detectar
 3c0:	99 b1       	in	r25, 0x09	; 9
 3c2:	96 95       	lsr	r25
 3c4:	98 27       	eor	r25, r24
 3c6:	91 70       	andi	r25, 0x01	; 1
 3c8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <limit_switch_lavH>
		 
		// Actualizo señales - Secado
		so7 = isBitSet(REG_SOB_PIN,PIN_SO7_PIN);
 3cc:	93 b1       	in	r25, 0x03	; 3
 3ce:	98 70       	andi	r25, 0x08	; 8
 3d0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <so7>
		so8 = isBitSet(REG_SOK_PIN,PIN_SO8_PIN);
 3d4:	90 81       	ld	r25, Z
 3d6:	90 78       	andi	r25, 0x80	; 128
 3d8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <so8>
		so9 = isBitSet(REG_SOK_PIN,PIN_SO9_PIN);
 3dc:	90 81       	ld	r25, Z
 3de:	98 70       	andi	r25, 0x08	; 8
 3e0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <so9>
		limit_switch_sec = isClrSet(REG_SW_PIN,PIN_SW3_PIN); // isClrSet porque SW3 '0' al detectar
 3e4:	99 b1       	in	r25, 0x09	; 9
 3e6:	96 95       	lsr	r25
 3e8:	96 95       	lsr	r25
 3ea:	89 27       	eor	r24, r25
 3ec:	81 70       	andi	r24, 0x01	; 1
 3ee:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
	 }
 }
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <setup_ParadaEmergencia>:
 ////// PARADA DE EMERGENCIA ///////
 ///////////////////////////////////

 void setup_ParadaEmergencia(){ // SW4 al soltar boton
	 
	 clearBit(REG_SW_DDR,PIN_SW4_DDR); //	Entrada
 414:	8a b1       	in	r24, 0x0a	; 10
 416:	8e 7f       	andi	r24, 0xFE	; 254
 418:	8a b9       	out	0x0a, r24	; 10
	 
	 setBit(EICRA,ISC00); // Interrupción flanco subida
 41a:	e9 e6       	ldi	r30, 0x69	; 105
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	81 60       	ori	r24, 0x01	; 1
 422:	80 83       	st	Z, r24
	 setBit(EICRA,ISC01);
 424:	80 81       	ld	r24, Z
 426:	82 60       	ori	r24, 0x02	; 2
 428:	80 83       	st	Z, r24
	 
	 setBit(EIMSK,INT0); // Activo mascara interrupción
 42a:	8d b3       	in	r24, 0x1d	; 29
 42c:	81 60       	ori	r24, 0x01	; 1
 42e:	8d bb       	out	0x1d, r24	; 29
	 
	 setBit(EIFR,INTF0); // Borro bandera interrupción
 430:	8c b3       	in	r24, 0x1c	; 28
 432:	81 60       	ori	r24, 0x01	; 1
 434:	8c bb       	out	0x1c, r24	; 28
 436:	08 95       	ret

00000438 <ParadaEmergencia>:
 }

 void ParadaEmergencia() {
	cli();
 438:	f8 94       	cli
	//setStop();
	
	// Parte 1
	stop_AlturaH();
 43a:	0e 94 38 03 	call	0x670	; 0x670 <stop_AlturaH>
	off_LavHorizontal();
 43e:	0e 94 40 03 	call	0x680	; 0x680 <off_LavHorizontal>
	stop_secado();
 442:	0e 94 b9 03 	call	0x772	; 0x772 <stop_secado>
	
	// Parte 2
	stopbarrera();
 446:	0e 94 77 04 	call	0x8ee	; 0x8ee <stopbarrera>
	
	// Parte 3
	stopCinta();
 44a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <stopCinta>
	off_Semaforo();
 44e:	0e 94 74 05 	call	0xae8	; 0xae8 <off_Semaforo>
	
	while(1) {
		lavadovertical(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 1f 05 	call	0xa3e	; 0xa3e <lavadovertical>
 458:	fc cf       	rjmp	.-8      	; 0x452 <ParadaEmergencia+0x1a>

0000045a <__vector_1>:

 //////////////////////////////////////
 ////// INTERRUPCIONES SENSORES ///////
 //////////////////////////////////////
 
 ISR(INT0_vect){ //Parada de emergencia
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
	 // SW4 al soltar boton [PD0] (INT0)
	 ParadaEmergencia();
 464:	0e 94 1c 02 	call	0x438	; 0x438 <ParadaEmergencia>

00000468 <__vector_9>:
	 
 }
 
 ISR(PCINT0_vect){
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	cf 93       	push	r28
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	 
	 //SO1 [SOB] (PCINT0)
	 if (isBitSet(REG_SOB_PIN,PIN_SO1_PIN) && reg_SO1 == 0){ // Flanco subida
 48c:	18 9b       	sbis	0x03, 0	; 3
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <__vector_9+0x38>
 490:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <reg_SO1>
 494:	81 11       	cpse	r24, r1
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__vector_9+0x38>
		 reg_SO1 = 1; // Actualizo registro SO1 con valor actual
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <reg_SO1>
 49e:	9c c0       	rjmp	.+312    	; 0x5d8 <__vector_9+0x170>
	
	 }
	 else if (isClrSet(REG_SOB_PIN,PIN_SO1_PIN) && (reg_SO1 == 1) && (EnableEntrance == 1)){ // Flanco bajada y entrada habilitada
 4a0:	18 99       	sbic	0x03, 0	; 3
 4a2:	24 c0       	rjmp	.+72     	; 0x4ec <__vector_9+0x84>
 4a4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <reg_SO1>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	01 f5       	brne	.+64     	; 0x4ec <__vector_9+0x84>
 4ac:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <EnableEntrance>
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	e1 f4       	brne	.+56     	; 0x4ec <__vector_9+0x84>
		 incNumCarLavado();		// Ha entrado coche
 4b4:	0e 94 ed 00 	call	0x1da	; 0x1da <incNumCarLavado>
		 enable_prove_new = 1; // Activo comprobación entrada
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <enable_prove_new>
		 cnt_prove_new = s;
 4be:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <s>
 4c2:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <s+0x1>
 4c6:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <s+0x2>
 4ca:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <s+0x3>
 4ce:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <cnt_prove_new>
 4d2:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <cnt_prove_new+0x1>
 4d6:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <cnt_prove_new+0x2>
 4da:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <cnt_prove_new+0x3>
		 EnableEntrance = 0;
 4de:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <EnableEntrance>
		 openbarrera();  
 4e2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <openbarrera>
		 
		 
		 reg_SO1 = 0; // Actualizo registro SO1 con valor actual
 4e6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <reg_SO1>
 4ea:	76 c0       	rjmp	.+236    	; 0x5d8 <__vector_9+0x170>
	 }
	 //SO3 [SOL] *PB1*(*PCINT1*) -- MODIFICACIÓN PROPUESTA POR NACHO :) --
	 else if (isClrSet(REG_SOB_PIN,PIN_SO3_PIN) && reg_SO3 == 1 && enable_prove_new == 1 && (s - cnt_prove_new < Tiempo_prove_new)){ // Flanco bajada y entrada habilitada
 4ec:	19 99       	sbic	0x03, 1	; 3
 4ee:	25 c0       	rjmp	.+74     	; 0x53a <__vector_9+0xd2>
 4f0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <reg_SO3>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f5       	brne	.+66     	; 0x53a <__vector_9+0xd2>
 4f8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <enable_prove_new>
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	e9 f4       	brne	.+58     	; 0x53a <__vector_9+0xd2>
 500:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <s>
 504:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <s+0x1>
 508:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <s+0x2>
 50c:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <s+0x3>
 510:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <cnt_prove_new>
 514:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <cnt_prove_new+0x1>
 518:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <cnt_prove_new+0x2>
 51c:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <cnt_prove_new+0x3>
 520:	84 1b       	sub	r24, r20
 522:	95 0b       	sbc	r25, r21
 524:	a6 0b       	sbc	r26, r22
 526:	b7 0b       	sbc	r27, r23
 528:	c8 97       	sbiw	r24, 0x38	; 56
 52a:	a1 05       	cpc	r26, r1
 52c:	b1 05       	cpc	r27, r1
 52e:	28 f4       	brcc	.+10     	; 0x53a <__vector_9+0xd2>
		 enable_prove_new = 0;
 530:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <enable_prove_new>
		 
		 reg_SO3 = 0; // Actualizo registro SO3 con valor actual
 534:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <reg_SO3>
 538:	4f c0       	rjmp	.+158    	; 0x5d8 <__vector_9+0x170>
	 }
	 
	 else if (isBitSet(REG_SOB_PIN,PIN_SO3_PIN) && reg_SO3 == 0 ){ // Flanco subida
 53a:	19 9b       	sbis	0x03, 1	; 3
 53c:	08 c0       	rjmp	.+16     	; 0x54e <__vector_9+0xe6>
 53e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <reg_SO3>
 542:	81 11       	cpse	r24, r1
 544:	04 c0       	rjmp	.+8      	; 0x54e <__vector_9+0xe6>
		 reg_SO3 = 1; // Actualizo registro SO3 con valor actual
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <reg_SO3>
 54c:	45 c0       	rjmp	.+138    	; 0x5d8 <__vector_9+0x170>
	 }
	 
	 //SO6 [SOB] (PCINT4)
	 else if (isBitSet(REG_SOB_PIN,PIN_SO6_PIN) && reg_SO6 == 0){ // Flanco subida - Paso del culo
 54e:	1c 9b       	sbis	0x03, 4	; 3
 550:	0c c0       	rjmp	.+24     	; 0x56a <__vector_9+0x102>
 552:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <reg_SO6>
 556:	81 11       	cpse	r24, r1
 558:	08 c0       	rjmp	.+16     	; 0x56a <__vector_9+0x102>
		 EnableEntrance = 1;
 55a:	c1 e0       	ldi	r28, 0x01	; 1
 55c:	c0 93 2a 02 	sts	0x022A, r28	; 0x80022a <EnableEntrance>
		 decNumCarLavado();
 560:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <decNumCarLavado>
		 
		 reg_SO6 = 1; // Actualizo registro SO6 con valor actual
 564:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <reg_SO6>
 568:	37 c0       	rjmp	.+110    	; 0x5d8 <__vector_9+0x170>
	 }
	 
	 else if (isClrSet(REG_SOB_PIN,PIN_SO6_PIN) && reg_SO6 == 1){ // Flanco bajada - Paso del morro
 56a:	1c 99       	sbic	0x03, 4	; 3
 56c:	09 c0       	rjmp	.+18     	; 0x580 <__vector_9+0x118>
 56e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <reg_SO6>
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	29 f4       	brne	.+10     	; 0x580 <__vector_9+0x118>
		 incNumCarSecado();
 576:	0e 94 fd 00 	call	0x1fa	; 0x1fa <incNumCarSecado>
		 reg_SO6 = 0;
 57a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <reg_SO6>
 57e:	2c c0       	rjmp	.+88     	; 0x5d8 <__vector_9+0x170>
	 }
	 
	 //SO12 [SOB] PB2 (PCINT2)
	 else if (isBitSet(REG_SOB_PIN,PIN_SO12_PIN) && reg_SO12 == 0){ // Flanco subida
 580:	1a 9b       	sbis	0x03, 2	; 3
 582:	0a c0       	rjmp	.+20     	; 0x598 <__vector_9+0x130>
 584:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 588:	81 11       	cpse	r24, r1
 58a:	06 c0       	rjmp	.+12     	; 0x598 <__vector_9+0x130>
		 decNumCarSecado();
 58c:	0e 94 03 01 	call	0x206	; 0x206 <decNumCarSecado>
		 reg_SO12 = 1; // Actualizo registro SO12 con valor actual
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 596:	20 c0       	rjmp	.+64     	; 0x5d8 <__vector_9+0x170>
	 }
	 
	 else if (isClrSet(REG_SOB_PIN,PIN_SO12_PIN) && reg_SO12 == 1){ // Flanco bajada
 598:	1a 99       	sbic	0x03, 2	; 3
 59a:	0c c0       	rjmp	.+24     	; 0x5b4 <__vector_9+0x14c>
 59c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	41 f4       	brne	.+16     	; 0x5b4 <__vector_9+0x14c>
		 reg_SO12 = 0; // Actualizo registro SO12 con valor actual
 5a4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
		 if (reg_SO10 == 1){	
 5a8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <reg_SO10>
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	a1 f4       	brne	.+40     	; 0x5d8 <__vector_9+0x170>
			 ParadaEmergencia();	// Caso en que el coche entre por la salida
 5b0:	0e 94 1c 02 	call	0x438	; 0x438 <ParadaEmergencia>
		 }
	 }
	 
	 //SO10 [SOB] PB5 (PCINT5)
	 else if (isClrSet(REG_SOB_PIN,PIN_SO10_PIN) && reg_SO10 == 1){ // Flanco bajada
 5b4:	1d 99       	sbic	0x03, 5	; 3
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <__vector_9+0x15e>
 5b8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <reg_SO10>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	19 f4       	brne	.+6      	; 0x5c6 <__vector_9+0x15e>
		 reg_SO10 = 0; // Actualizo registro SO12 con valor actual
 5c0:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <reg_SO10>
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <__vector_9+0x170>
	 }
	 
	 else if (isBitSet(REG_SOB_PIN,PIN_SO10_PIN) && reg_SO10 == 0){ // Flanco bajada
 5c6:	1d 9b       	sbis	0x03, 5	; 3
 5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <__vector_9+0x170>
 5ca:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <reg_SO10>
 5ce:	81 11       	cpse	r24, r1
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <__vector_9+0x170>
		 reg_SO10 = 1; // Actualizo registro SO12 con valor actual
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <reg_SO10>
	 }
	 	 
 }
 5d8:	ff 91       	pop	r31
 5da:	ef 91       	pop	r30
 5dc:	cf 91       	pop	r28
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <main>:
#include "Integration.h"


int main(void) {

	setup_General();
 5fc:	0e 94 0d 01 	call	0x21a	; 0x21a <setup_General>
	setup_Integration();
 600:	0e 94 43 01 	call	0x286	; 0x286 <setup_Integration>
	setup_Parte1();
 604:	0e 94 24 04 	call	0x848	; 0x848 <setup_Parte1>
	setup_Parte2();
 608:	0e 94 2d 05 	call	0xa5a	; 0xa5a <setup_Parte2>
	setup_Parte3();
 60c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <setup_Parte3>
	

	while(1) {
		Parte_1();
 610:	0e 94 2b 04 	call	0x856	; 0x856 <Parte_1>
		Parte_2();
 614:	0e 94 34 05 	call	0xa68	; 0xa68 <Parte_2>
		Parte_3();
 618:	0e 94 af 05 	call	0xb5e	; 0xb5e <Parte_3>
 61c:	f9 cf       	rjmp	.-14     	; 0x610 <main+0x14>

0000061e <setup_LavHorizontal>:
//////////////////////////////////


void setup_LavHorizontal(){ // Inicialización
	// Motor 3: Altura rodillo H
	setBit(REG_M3_en_DDR,PIN_M3_en_DDR); // Definir como salida
 61e:	8a b1       	in	r24, 0x0a	; 10
 620:	80 61       	ori	r24, 0x10	; 16
 622:	8a b9       	out	0x0a, r24	; 10
	setBit(REG_M3_di_DDR,PIN_M3_di_DDR);
 624:	ea e0       	ldi	r30, 0x0A	; 10
 626:	f1 e0       	ldi	r31, 0x01	; 1
 628:	80 81       	ld	r24, Z
 62a:	80 61       	ori	r24, 0x10	; 16
 62c:	80 83       	st	Z, r24
	setBit(REG_M3_en_PORT,PIN_M3_en_PORT); // Subir rodillo
 62e:	8b b1       	in	r24, 0x0b	; 11
 630:	80 61       	ori	r24, 0x10	; 16
 632:	8b b9       	out	0x0b, r24	; 11
	clearBit(REG_M3_di_PORT,PIN_M3_di_PORT);
 634:	eb e0       	ldi	r30, 0x0B	; 11
 636:	f1 e0       	ldi	r31, 0x01	; 1
 638:	80 81       	ld	r24, Z
 63a:	8f 7e       	andi	r24, 0xEF	; 239
 63c:	80 83       	st	Z, r24
	
	// Motor 4: Giro rodillo
	setBit(REG_M4_en_DDR,PIN_M4_en_DDR); // Definir como salida
 63e:	8a b1       	in	r24, 0x0a	; 10
 640:	80 64       	ori	r24, 0x40	; 64
 642:	8a b9       	out	0x0a, r24	; 10
	clearBit(REG_M4_en_PORT,PIN_M4_en_PORT); // Apagado de inicio
 644:	8b b1       	in	r24, 0x0b	; 11
 646:	8f 7b       	andi	r24, 0xBF	; 191
 648:	8b b9       	out	0x0b, r24	; 11
 64a:	08 95       	ret

0000064c <up_LavHorizontal>:


	// LAVADERO HORIZONTAL - ALTURA

void up_LavHorizontal(){
	setBit(REG_M3_en_PORT,PIN_M3_en_PORT);
 64c:	8b b1       	in	r24, 0x0b	; 11
 64e:	80 61       	ori	r24, 0x10	; 16
 650:	8b b9       	out	0x0b, r24	; 11
	setBit(REG_M3_di_PORT,PIN_M3_di_PORT);
 652:	eb e0       	ldi	r30, 0x0B	; 11
 654:	f1 e0       	ldi	r31, 0x01	; 1
 656:	80 81       	ld	r24, Z
 658:	80 61       	ori	r24, 0x10	; 16
 65a:	80 83       	st	Z, r24
 65c:	08 95       	ret

0000065e <down_LavHorizontal>:
}

void down_LavHorizontal(){
	setBit(REG_M3_en_PORT,PIN_M3_en_PORT);
 65e:	8b b1       	in	r24, 0x0b	; 11
 660:	80 61       	ori	r24, 0x10	; 16
 662:	8b b9       	out	0x0b, r24	; 11
	clearBit(REG_M3_di_PORT,PIN_M3_di_PORT); // COMPROBAR EN MAQUETA si es ~[setBit() o clearBit()]
 664:	eb e0       	ldi	r30, 0x0B	; 11
 666:	f1 e0       	ldi	r31, 0x01	; 1
 668:	80 81       	ld	r24, Z
 66a:	8f 7e       	andi	r24, 0xEF	; 239
 66c:	80 83       	st	Z, r24
 66e:	08 95       	ret

00000670 <stop_AlturaH>:
}

void stop_AlturaH(){
	clearBit(REG_M3_en_PORT,PIN_M3_en_PORT);
 670:	8b b1       	in	r24, 0x0b	; 11
 672:	8f 7e       	andi	r24, 0xEF	; 239
 674:	8b b9       	out	0x0b, r24	; 11
 676:	08 95       	ret

00000678 <on_LavHorizontal>:


	// LAVADERO HORIZONTAL - GIRO

void on_LavHorizontal(){
	setBit(REG_M4_en_PORT,PIN_M4_en_PORT);
 678:	8b b1       	in	r24, 0x0b	; 11
 67a:	80 64       	ori	r24, 0x40	; 64
 67c:	8b b9       	out	0x0b, r24	; 11
 67e:	08 95       	ret

00000680 <off_LavHorizontal>:
}

void off_LavHorizontal(){
	clearBit(REG_M4_en_PORT,PIN_M4_en_PORT);
 680:	8b b1       	in	r24, 0x0b	; 11
 682:	8f 7b       	andi	r24, 0xBF	; 191
 684:	8b b9       	out	0x0b, r24	; 11
 686:	08 95       	ret

00000688 <lavaderoHorizontal>:
}

void lavaderoHorizontal(){
		
	if((so3p==so3) && (so4p==so4) && (so5p==so5)){  //Si los valores son los mismos que en instante anterior
 688:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <so3p>
 68c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 690:	98 13       	cpse	r25, r24
 692:	10 c0       	rjmp	.+32     	; 0x6b4 <lavaderoHorizontal+0x2c>
 694:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <so4p>
 698:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <so4>
 69c:	98 13       	cpse	r25, r24
 69e:	0a c0       	rjmp	.+20     	; 0x6b4 <lavaderoHorizontal+0x2c>
 6a0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <so5p>
 6a4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <so5>
 6a8:	98 13       	cpse	r25, r24
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <lavaderoHorizontal+0x2c>
		aux_lavH = 1;		  //muevo el rodillo
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <aux_lavH>
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <lavaderoHorizontal+0x30>
	}
	else{
		aux_lavH = 0;		  //no hago nada
 6b4:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <aux_lavH>
	}
	
	if (limit_switch_lavH == 1 && isBitSet(REG_M3_en_PORT,PIN_M3_en_PORT)){  // devuelve '1' si detecta fin de carrera Y si el motor esta encendido
 6b8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <limit_switch_lavH>
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	61 f4       	brne	.+24     	; 0x6d8 <lavaderoHorizontal+0x50>
 6c0:	5c 9b       	sbis	0x0b, 4	; 11
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <lavaderoHorizontal+0x50>
		off_LavHorizontal(); //deja de girar el rodillo
 6c4:	0e 94 40 03 	call	0x680	; 0x680 <off_LavHorizontal>
		toggleBit(REG_M3_di_PORT,PIN_M3_di_PORT); // cambia el sentido del motor
 6c8:	eb e0       	ldi	r30, 0x0B	; 11
 6ca:	f1 e0       	ldi	r31, 0x01	; 1
 6cc:	90 81       	ld	r25, Z
 6ce:	80 e1       	ldi	r24, 0x10	; 16
 6d0:	89 27       	eor	r24, r25
 6d2:	80 83       	st	Z, r24
		stop_AlturaH(); //se para el rodillo
 6d4:	0e 94 38 03 	call	0x670	; 0x670 <stop_AlturaH>
	}
	
	if(aux_lavH){		//si los valores de los sensores son los mismos que en instante anterior (antirrebotes)
 6d8:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <aux_lavH>
 6dc:	88 23       	and	r24, r24
 6de:	09 f1       	breq	.+66     	; 0x722 <lavaderoHorizontal+0x9a>
		if (so4==0 && so3!=0){		//detecta abajo pero no a los lados
 6e0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <so4>
 6e4:	81 11       	cpse	r24, r1
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <lavaderoHorizontal+0x72>
 6e8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 6ec:	88 23       	and	r24, r24
 6ee:	29 f0       	breq	.+10     	; 0x6fa <lavaderoHorizontal+0x72>
			stop_AlturaH();
 6f0:	0e 94 38 03 	call	0x670	; 0x670 <stop_AlturaH>
			on_LavHorizontal();
 6f4:	0e 94 3c 03 	call	0x678	; 0x678 <on_LavHorizontal>
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <lavaderoHorizontal+0x9a>
			} else if(so3==0){					//detecta alguno de los lados
 6fa:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 6fe:	81 11       	cpse	r24, r1
 700:	05 c0       	rjmp	.+10     	; 0x70c <lavaderoHorizontal+0x84>
			up_LavHorizontal();  //sube el rodillo
 702:	0e 94 26 03 	call	0x64c	; 0x64c <up_LavHorizontal>
			on_LavHorizontal();  //empieza a girar el rodillo
 706:	0e 94 3c 03 	call	0x678	; 0x678 <on_LavHorizontal>
 70a:	0b c0       	rjmp	.+22     	; 0x722 <lavaderoHorizontal+0x9a>
			} else if(limit_switch_lavH==0){												//no detecta nada
 70c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <limit_switch_lavH>
 710:	81 11       	cpse	r24, r1
 712:	05 c0       	rjmp	.+10     	; 0x71e <lavaderoHorizontal+0x96>
			down_LavHorizontal();
 714:	0e 94 2f 03 	call	0x65e	; 0x65e <down_LavHorizontal>
			on_LavHorizontal();
 718:	0e 94 3c 03 	call	0x678	; 0x678 <on_LavHorizontal>
 71c:	02 c0       	rjmp	.+4      	; 0x722 <lavaderoHorizontal+0x9a>
			} else{
			off_LavHorizontal();
 71e:	0e 94 40 03 	call	0x680	; 0x680 <off_LavHorizontal>
		}
	}
	so3p = so3;
 722:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 726:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <so3p>
	so4p = so4;
 72a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <so4>
 72e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <so4p>
	so5p = so5;
 732:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <so5>
 736:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <so5p>
 73a:	08 95       	ret

0000073c <setup_secado>:
////// FUNCIONES SECADO ///////
///////////////////////////////

void setup_secado(){
	// Motor 5: Altura secador
	setBit(REG_M5_en_DDR,PIN_M5_en_DDR);
 73c:	84 b1       	in	r24, 0x04	; 4
 73e:	80 64       	ori	r24, 0x40	; 64
 740:	84 b9       	out	0x04, r24	; 4
	setBit(REG_M5_di_DDR,PIN_M5_di_DDR);
 742:	8a b1       	in	r24, 0x0a	; 10
 744:	80 68       	ori	r24, 0x80	; 128
 746:	8a b9       	out	0x0a, r24	; 10
	setBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 748:	85 b1       	in	r24, 0x05	; 5
 74a:	80 64       	ori	r24, 0x40	; 64
 74c:	85 b9       	out	0x05, r24	; 5
	clearBit(REG_M5_di_PORT,PIN_M5_di_PORT);
 74e:	8b b1       	in	r24, 0x0b	; 11
 750:	8f 77       	andi	r24, 0x7F	; 127
 752:	8b b9       	out	0x0b, r24	; 11
 754:	08 95       	ret

00000756 <up_secado>:

}

void up_secado(){
	setBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 756:	85 b1       	in	r24, 0x05	; 5
 758:	80 64       	ori	r24, 0x40	; 64
 75a:	85 b9       	out	0x05, r24	; 5
	setBit(REG_M5_di_PORT,PIN_M5_di_PORT);
 75c:	8b b1       	in	r24, 0x0b	; 11
 75e:	80 68       	ori	r24, 0x80	; 128
 760:	8b b9       	out	0x0b, r24	; 11
 762:	08 95       	ret

00000764 <down_secado>:
}

void down_secado(){
	setBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 764:	85 b1       	in	r24, 0x05	; 5
 766:	80 64       	ori	r24, 0x40	; 64
 768:	85 b9       	out	0x05, r24	; 5
	clearBit(REG_M5_di_PORT,PIN_M5_di_PORT);
 76a:	8b b1       	in	r24, 0x0b	; 11
 76c:	8f 77       	andi	r24, 0x7F	; 127
 76e:	8b b9       	out	0x0b, r24	; 11
 770:	08 95       	ret

00000772 <stop_secado>:
}

void stop_secado(){
	clearBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 772:	85 b1       	in	r24, 0x05	; 5
 774:	8f 7b       	andi	r24, 0xBF	; 191
 776:	85 b9       	out	0x05, r24	; 5
 778:	08 95       	ret

0000077a <secado>:
}

void secado(){

	if((so7p==so7) && (so8p==so8) && (so9p==so9)){  //Si los valores son los mismos que en instante anterior
 77a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <so7p>
 77e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 782:	98 13       	cpse	r25, r24
 784:	10 c0       	rjmp	.+32     	; 0x7a6 <secado+0x2c>
 786:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <so8p>
 78a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 78e:	98 13       	cpse	r25, r24
 790:	0a c0       	rjmp	.+20     	; 0x7a6 <secado+0x2c>
 792:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <so9p>
 796:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 79a:	98 13       	cpse	r25, r24
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <secado+0x2c>
		aux_sec = 1;          //muevo el secador
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <aux_sec>
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <secado+0x30>
	}
	else{
		aux_sec = 0;          //no hago nada
 7a6:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <aux_sec>
	}
	
	if(aux_sec) {
 7aa:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <aux_sec>
 7ae:	88 23       	and	r24, r24
 7b0:	f1 f1       	breq	.+124    	; 0x82e <secado+0xb4>
		if( so8 && so7 && so9)                 // no detecta abajo
 7b2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 7b6:	88 23       	and	r24, r24
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <secado+0x56>
 7ba:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 7be:	88 23       	and	r24, r24
 7c0:	39 f0       	breq	.+14     	; 0x7d0 <secado+0x56>
 7c2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 7c6:	88 23       	and	r24, r24
 7c8:	19 f0       	breq	.+6      	; 0x7d0 <secado+0x56>
			down_secado();                    // baja
 7ca:	0e 94 b2 03 	call	0x764	; 0x764 <down_secado>
 7ce:	2f c0       	rjmp	.+94     	; 0x82e <secado+0xb4>
		else if( so8 || !(so7 && so9) )
 7d0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 7d4:	81 11       	cpse	r24, r1
 7d6:	08 c0       	rjmp	.+16     	; 0x7e8 <secado+0x6e>
 7d8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 7dc:	88 23       	and	r24, r24
 7de:	21 f0       	breq	.+8      	; 0x7e8 <secado+0x6e>
 7e0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 7e4:	81 11       	cpse	r24, r1
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <secado+0x74>
			up_secado();
 7e8:	0e 94 ab 03 	call	0x756	; 0x756 <up_secado>
 7ec:	20 c0       	rjmp	.+64     	; 0x82e <secado+0xb4>
		else if( !(so8 || (so7 && so9)) )    // detecta abajo y en algun lateral
 7ee:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 7f2:	81 11       	cpse	r24, r1
 7f4:	0b c0       	rjmp	.+22     	; 0x80c <secado+0x92>
 7f6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 7fa:	88 23       	and	r24, r24
 7fc:	21 f0       	breq	.+8      	; 0x806 <secado+0x8c>
 7fe:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 802:	81 11       	cpse	r24, r1
 804:	03 c0       	rjmp	.+6      	; 0x80c <secado+0x92>
			up_secado();                    // sube
 806:	0e 94 ab 03 	call	0x756	; 0x756 <up_secado>
 80a:	11 c0       	rjmp	.+34     	; 0x82e <secado+0xb4>
		else if( !so8 && so7 && so9 )        // detecta abajo pero no en los laterales
 80c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 810:	81 11       	cpse	r24, r1
 812:	0b c0       	rjmp	.+22     	; 0x82a <secado+0xb0>
 814:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 818:	88 23       	and	r24, r24
 81a:	39 f0       	breq	.+14     	; 0x82a <secado+0xb0>
 81c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 820:	88 23       	and	r24, r24
 822:	19 f0       	breq	.+6      	; 0x82a <secado+0xb0>
			stop_secado();                    // permanece quieto
 824:	0e 94 b9 03 	call	0x772	; 0x772 <stop_secado>
 828:	02 c0       	rjmp	.+4      	; 0x82e <secado+0xb4>
		else
			stop_secado();
 82a:	0e 94 b9 03 	call	0x772	; 0x772 <stop_secado>
	}
	so7p = so7;
 82e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 832:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <so7p>
	so8p = so8;
 836:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 83a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <so8p>
	so9p = so9;
 83e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 842:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <so9p>
 846:	08 95       	ret

00000848 <setup_Parte1>:
////////////////////
////// COMÚN ///////
////////////////////

void setup_Parte1(){
	cli();
 848:	f8 94       	cli
	setup_LavHorizontal();
 84a:	0e 94 0f 03 	call	0x61e	; 0x61e <setup_LavHorizontal>
	setup_secado();
 84e:	0e 94 9e 03 	call	0x73c	; 0x73c <setup_secado>
	sei();
 852:	78 94       	sei
 854:	08 95       	ret

00000856 <Parte_1>:
}

void Parte_1(){
	if (enable_check_parte1){
 856:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <enable_check_parte1>
 85a:	88 23       	and	r24, r24
 85c:	31 f0       	breq	.+12     	; 0x86a <Parte_1+0x14>
		lavaderoHorizontal();
 85e:	0e 94 44 03 	call	0x688	; 0x688 <lavaderoHorizontal>
		secado();
 862:	0e 94 bd 03 	call	0x77a	; 0x77a <secado>
		enable_check_parte1 = 0;
 866:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <enable_check_parte1>
	}
	if (NumCarLavado){
 86a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 86e:	88 23       	and	r24, r24
 870:	19 f0       	breq	.+6      	; 0x878 <Parte_1+0x22>
		on_LavHorizontal();
 872:	0e 94 3c 03 	call	0x678	; 0x678 <on_LavHorizontal>
 876:	08 95       	ret
	} 	else off_LavHorizontal();
 878:	0e 94 40 03 	call	0x680	; 0x680 <off_LavHorizontal>
 87c:	08 95       	ret

0000087e <setup_barrera>:
	modo_barrera = 1;
}

void closebarrera(){
	setBit(REG_M1_en_PORT, PIN_M1_en_PORT); // Encendido motor barrera
	modo_barrera = 2;	// Cambia estado en barrera()
 87e:	f8 94       	cli
 880:	ea e0       	ldi	r30, 0x0A	; 10
 882:	f1 e0       	ldi	r31, 0x01	; 1
 884:	80 81       	ld	r24, Z
 886:	84 60       	ori	r24, 0x04	; 4
 888:	80 83       	st	Z, r24
 88a:	eb e0       	ldi	r30, 0x0B	; 11
 88c:	f1 e0       	ldi	r31, 0x01	; 1
 88e:	80 81       	ld	r24, Z
 890:	8b 7f       	andi	r24, 0xFB	; 251
 892:	80 83       	st	Z, r24
 894:	84 b1       	in	r24, 0x04	; 4
 896:	8e 7f       	andi	r24, 0xFE	; 254
 898:	84 b9       	out	0x04, r24	; 4
 89a:	78 94       	sei
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <setup_barrera+0x2a>
 89e:	eb e0       	ldi	r30, 0x0B	; 11
 8a0:	f1 e0       	ldi	r31, 0x01	; 1
 8a2:	80 81       	ld	r24, Z
 8a4:	84 60       	ori	r24, 0x04	; 4
 8a6:	80 83       	st	Z, r24
 8a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7f0106>
 8ac:	82 fd       	sbrc	r24, 2
 8ae:	f7 cf       	rjmp	.-18     	; 0x89e <setup_barrera+0x20>
 8b0:	eb e0       	ldi	r30, 0x0B	; 11
 8b2:	f1 e0       	ldi	r31, 0x01	; 1
 8b4:	80 81       	ld	r24, Z
 8b6:	8b 7f       	andi	r24, 0xFB	; 251
 8b8:	80 83       	st	Z, r24
 8ba:	08 95       	ret

000008bc <openbarrera>:
 8bc:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <ms>
 8c0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <ms+0x1>
 8c4:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <ms+0x2>
 8c8:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <ms+0x3>
 8cc:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <cnt_apertura_barrera>
 8d0:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <cnt_apertura_barrera+0x1>
 8d4:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <cnt_apertura_barrera+0x2>
 8d8:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <cnt_apertura_barrera+0x3>
 8dc:	eb e0       	ldi	r30, 0x0B	; 11
 8de:	f1 e0       	ldi	r31, 0x01	; 1
 8e0:	80 81       	ld	r24, Z
 8e2:	84 60       	ori	r24, 0x04	; 4
 8e4:	80 83       	st	Z, r24
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <modo_barrera>
 8ec:	08 95       	ret

000008ee <stopbarrera>:
}

void stopbarrera(){
	modo_barrera = 0;	// Cambia estado en barrera()
 8ee:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <modo_barrera>
 8f2:	08 95       	ret

000008f4 <barrera>:
}

void barrera(){		// Loop
	
	switch (modo_barrera){
 8f4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <modo_barrera>
 8f8:	81 30       	cpi	r24, 0x01	; 1
 8fa:	51 f0       	breq	.+20     	; 0x910 <barrera+0x1c>
 8fc:	18 f0       	brcs	.+6      	; 0x904 <barrera+0x10>
 8fe:	82 30       	cpi	r24, 0x02	; 2
 900:	41 f1       	breq	.+80     	; 0x952 <barrera+0x5e>
 902:	08 95       	ret
		case 0:		//Barrera parada
			clearBit(REG_M1_en_PORT, PIN_M1_en_PORT); // Apago motor barrera, nos aseguramos que se para
 904:	eb e0       	ldi	r30, 0x0B	; 11
 906:	f1 e0       	ldi	r31, 0x01	; 1
 908:	80 81       	ld	r24, Z
 90a:	8b 7f       	andi	r24, 0xFB	; 251
 90c:	80 83       	st	Z, r24
			break;
 90e:	08 95       	ret
			
		case 1:		//Barrera Subir 
			// setBit(REG_M1_en_PORT, PIN_M1_en_PORT); // Encendido -- Ya uncluido en openbarrera();
			if(ms - cnt_apertura_barrera > Check_apertura_barrera){		
 910:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <ms>
 914:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <ms+0x1>
 918:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <ms+0x2>
 91c:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <ms+0x3>
 920:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <cnt_apertura_barrera>
 924:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <cnt_apertura_barrera+0x1>
 928:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <cnt_apertura_barrera+0x2>
 92c:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <cnt_apertura_barrera+0x3>
 930:	84 1b       	sub	r24, r20
 932:	95 0b       	sbc	r25, r21
 934:	a6 0b       	sbc	r26, r22
 936:	b7 0b       	sbc	r27, r23
 938:	81 34       	cpi	r24, 0x41	; 65
 93a:	96 40       	sbci	r25, 0x06	; 6
 93c:	a1 05       	cpc	r26, r1
 93e:	b1 05       	cpc	r27, r1
 940:	98 f0       	brcs	.+38     	; 0x968 <barrera+0x74>
				clearBit(REG_M1_en_PORT, PIN_M1_en_PORT); // Apago motor barrera
 942:	eb e0       	ldi	r30, 0x0B	; 11
 944:	f1 e0       	ldi	r31, 0x01	; 1
 946:	80 81       	ld	r24, Z
 948:	8b 7f       	andi	r24, 0xFB	; 251
 94a:	80 83       	st	Z, r24
				modo_barrera = 0; // Cambio a modo 0 (Barrera parada)
 94c:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <modo_barrera>
 950:	08 95       	ret
			}
			break;
			
		case 2:		//Barrera Bajar
			// setBit(REG_M1_en_PORT, PIN_M1_en_PORT); // Encendido -- Ya uncluido en closebarrera();
			if (isClrSet(REG_SOK_PIN,PIN_SO2_PIN) == 1){ // Detecto barrera cerrada
 952:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7f0106>
 956:	82 fd       	sbrc	r24, 2
 958:	07 c0       	rjmp	.+14     	; 0x968 <barrera+0x74>
				clearBit(REG_M1_en_PORT, PIN_M1_en_PORT); // Apago motor barrera
 95a:	eb e0       	ldi	r30, 0x0B	; 11
 95c:	f1 e0       	ldi	r31, 0x01	; 1
 95e:	80 81       	ld	r24, Z
 960:	8b 7f       	andi	r24, 0xFB	; 251
 962:	80 83       	st	Z, r24
				modo_barrera = 0;
 964:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <modo_barrera>
 968:	08 95       	ret

0000096a <setup_luz>:
////////////////////	 LUZ (L1)	////////////////////
////////////////////////////////////////////////////////


void setup_luz(){
	cli();
 96a:	f8 94       	cli
	setBit(REG_LED_DDR, PIN_L1_DDR); // Pin del LED como salida
 96c:	ea e0       	ldi	r30, 0x0A	; 10
 96e:	f1 e0       	ldi	r31, 0x01	; 1
 970:	80 81       	ld	r24, Z
 972:	82 60       	ori	r24, 0x02	; 2
 974:	80 83       	st	Z, r24
	clearBit(REG_LED_PORT, PIN_L1_PORT); //LED apagado inicialmente
 976:	eb e0       	ldi	r30, 0x0B	; 11
 978:	f1 e0       	ldi	r31, 0x01	; 1
 97a:	80 81       	ld	r24, Z
 97c:	8d 7f       	andi	r24, 0xFD	; 253
 97e:	80 83       	st	Z, r24
	// Configurar Timer 5 para generar interrupción cada 0.5 segundo
	TCCR5B |= (1 << CS52) | (1 << CS50); // Prescaler de 1024
 980:	e1 e2       	ldi	r30, 0x21	; 33
 982:	f1 e0       	ldi	r31, 0x01	; 1
 984:	80 81       	ld	r24, Z
 986:	85 60       	ori	r24, 0x05	; 5
 988:	80 83       	st	Z, r24
	TCNT5 = 0; // Inicializar el contador
 98a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7f0125>
 98e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7f0124>
	OCR5A = 3905; // Valor de comparación para 0.5 segundo
 992:	81 e4       	ldi	r24, 0x41	; 65
 994:	9f e0       	ldi	r25, 0x0F	; 15
 996:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7f0129>
 99a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7f0128>
	TIMSK5 |= (1 << OCIE5A); // Habilitar la interrupción por comparación
 99e:	e3 e7       	ldi	r30, 0x73	; 115
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	82 60       	ori	r24, 0x02	; 2
 9a6:	80 83       	st	Z, r24
	sei();
 9a8:	78 94       	sei
 9aa:	08 95       	ret

000009ac <control_LED1>:
}

void control_LED1(void){
	if (NumCarLavado == 0 && NumCarSecado == 0) aux_parpadeo_LED1 = 20; // Parpadeo largo: Lavadero no funciona (sin coches)
 9ac:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 9b0:	81 11       	cpse	r24, r1
 9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <control_LED1+0x18>
 9b4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <NumCarSecado>
 9b8:	81 11       	cpse	r24, r1
 9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <control_LED1+0x18>
 9bc:	84 e1       	ldi	r24, 0x14	; 20
 9be:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <aux_parpadeo_LED1>
 9c2:	08 95       	ret
	else aux_parpadeo_LED1 = 2; // Parpadeo corto: Lavadero funciona (hay coches)
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <aux_parpadeo_LED1>
 9ca:	08 95       	ret

000009cc <__vector_47>:
}

ISR(TIMER5_COMPA_vect) {	//Timer solo usado por Parte2 
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	8f 93       	push	r24
 9d8:	9f 93       	push	r25
 9da:	ef 93       	push	r30
 9dc:	ff 93       	push	r31
	// Rutina de interrupción del Timer 5
	timer_ticks++;
 9de:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <timer_ticks>
 9e2:	8f 5f       	subi	r24, 0xFF	; 255
 9e4:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <timer_ticks>
	if (timer_ticks == aux_parpadeo_LED1) { // 10 segundos
 9e8:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <timer_ticks>
 9ec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <aux_parpadeo_LED1>
 9f0:	98 13       	cpse	r25, r24
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__vector_47+0x38>
		setBit(REG_LED_PORT,PIN_L1_PORT); // Enciendo el LED
 9f4:	eb e0       	ldi	r30, 0x0B	; 11
 9f6:	f1 e0       	ldi	r31, 0x01	; 1
 9f8:	80 81       	ld	r24, Z
 9fa:	82 60       	ori	r24, 0x02	; 2
 9fc:	80 83       	st	Z, r24
		timer_ticks = 0; // Reiniciar el contador
 9fe:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <timer_ticks>
 a02:	09 c0       	rjmp	.+18     	; 0xa16 <__vector_47+0x4a>
	}
	else if (timer_ticks == 1) { // 0.5 segundo
 a04:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <timer_ticks>
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	29 f4       	brne	.+10     	; 0xa16 <__vector_47+0x4a>
		clearBit(REG_LED_PORT,PIN_L1_PORT); // Apago el LED
 a0c:	eb e0       	ldi	r30, 0x0B	; 11
 a0e:	f1 e0       	ldi	r31, 0x01	; 1
 a10:	80 81       	ld	r24, Z
 a12:	8d 7f       	andi	r24, 0xFD	; 253
 a14:	80 83       	st	Z, r24
	}
}
 a16:	ff 91       	pop	r31
 a18:	ef 91       	pop	r30
 a1a:	9f 91       	pop	r25
 a1c:	8f 91       	pop	r24
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <setup_lv>:
///////////////////	 LAVADO VERTICAL  //////////////////
////////////////////////////////////////////////////////


void setup_lv(){
	setBit (REG_M2_en_DDR, PIN_M2_en_DDR);
 a28:	e7 e0       	ldi	r30, 0x07	; 7
 a2a:	f1 e0       	ldi	r31, 0x01	; 1
 a2c:	80 81       	ld	r24, Z
 a2e:	80 64       	ori	r24, 0x40	; 64
 a30:	80 83       	st	Z, r24
	clearBit(REG_M2_en_PORT, PIN_M2_en_PORT); //por defecto apagado
 a32:	e8 e0       	ldi	r30, 0x08	; 8
 a34:	f1 e0       	ldi	r31, 0x01	; 1
 a36:	80 81       	ld	r24, Z
 a38:	8f 7b       	andi	r24, 0xBF	; 191
 a3a:	80 83       	st	Z, r24
 a3c:	08 95       	ret

00000a3e <lavadovertical>:
	modo_lavado=0;
}*/

void lavadovertical(uint8_t modo_lavado){
	
	if (!modo_lavado){	// Para: No hay Coches
 a3e:	81 11       	cpse	r24, r1
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <lavadovertical+0x10>
		clearBit(REG_M2_en_PORT, PIN_M2_en_PORT); // Apago motor lavado, nos aseguramos que para
 a42:	e8 e0       	ldi	r30, 0x08	; 8
 a44:	f1 e0       	ldi	r31, 0x01	; 1
 a46:	80 81       	ld	r24, Z
 a48:	8f 7b       	andi	r24, 0xBF	; 191
 a4a:	80 83       	st	Z, r24
 a4c:	08 95       	ret
	} 
	else{	// Activa: Hay Coches
		setBit(REG_M2_en_PORT, PIN_M2_en_PORT);
 a4e:	e8 e0       	ldi	r30, 0x08	; 8
 a50:	f1 e0       	ldi	r31, 0x01	; 1
 a52:	80 81       	ld	r24, Z
 a54:	80 64       	ori	r24, 0x40	; 64
 a56:	80 83       	st	Z, r24
 a58:	08 95       	ret

00000a5a <setup_Parte2>:
//////////////////////////////////////////////
//////////////////	 COMÚN 	//////////////////
//////////////////////////////////////////////

void setup_Parte2(void){
	setup_barrera();
 a5a:	0e 94 3f 04 	call	0x87e	; 0x87e <setup_barrera>
	setup_luz();
 a5e:	0e 94 b5 04 	call	0x96a	; 0x96a <setup_luz>
	setup_lv();
 a62:	0e 94 14 05 	call	0xa28	; 0xa28 <setup_lv>
 a66:	08 95       	ret

00000a68 <Parte_2>:
}

void Parte_2(void){
	barrera();
 a68:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <barrera>
	control_LED1();
 a6c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <control_LED1>
	lavadovertical(NumCarLavado);	
 a70:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 a74:	0e 94 1f 05 	call	0xa3e	; 0xa3e <lavadovertical>
 a78:	08 95       	ret

00000a7a <setupCinta>:
////////////////////////////////
////// CINTA DE ARRASTRE ///////
////////////////////////////////

void setupCinta(){	//Inicialización
	setBit(REG_M6_di_DDR, PIN_M6_di_DDR); //Configurar el pin de dirección M6 como salida
 a7a:	ea e0       	ldi	r30, 0x0A	; 10
 a7c:	f1 e0       	ldi	r31, 0x01	; 1
 a7e:	80 81       	ld	r24, Z
 a80:	81 60       	ori	r24, 0x01	; 1
 a82:	80 83       	st	Z, r24
	setBit(REG_M6_en_DDR, PIN_M6_en_DDR); //Configurar el pin M6 en como salida
 a84:	84 b1       	in	r24, 0x04	; 4
 a86:	80 68       	ori	r24, 0x80	; 128
 a88:	84 b9       	out	0x04, r24	; 4
	setBit(REG_M6_di_PORT, PIN_M6_di_PORT); //Ajustar el sentido de giro de M6 a la derecha
 a8a:	eb e0       	ldi	r30, 0x0B	; 11
 a8c:	f1 e0       	ldi	r31, 0x01	; 1
 a8e:	80 81       	ld	r24, Z
 a90:	81 60       	ori	r24, 0x01	; 1
 a92:	80 83       	st	Z, r24
 a94:	08 95       	ret

00000a96 <moveCinta>:
}

void moveCinta(){
	setBit(REG_M6_en_PORT, PIN_M6_en_PORT);
 a96:	85 b1       	in	r24, 0x05	; 5
 a98:	80 68       	ori	r24, 0x80	; 128
 a9a:	85 b9       	out	0x05, r24	; 5
	setBit(TCCR1A, COM1C1);
 a9c:	e0 e8       	ldi	r30, 0x80	; 128
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	80 81       	ld	r24, Z
 aa2:	88 60       	ori	r24, 0x08	; 8
 aa4:	80 83       	st	Z, r24
 aa6:	08 95       	ret

00000aa8 <stopCinta>:
}

void stopCinta(){
	clearBit(REG_M6_en_PORT, PIN_M6_en_PORT);
 aa8:	85 b1       	in	r24, 0x05	; 5
 aaa:	8f 77       	andi	r24, 0x7F	; 127
 aac:	85 b9       	out	0x05, r24	; 5
	clearBit(TCCR1A, COM1C1);
 aae:	e0 e8       	ldi	r30, 0x80	; 128
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	80 81       	ld	r24, Z
 ab4:	87 7f       	andi	r24, 0xF7	; 247
 ab6:	80 83       	st	Z, r24
 ab8:	08 95       	ret

00000aba <cinta>:
}

void cinta(){	//Loop
	if (NumCarLavado == 0 && NumCarSecado == 0){	// Ningún vehículo
 aba:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 abe:	81 11       	cpse	r24, r1
 ac0:	07 c0       	rjmp	.+14     	; 0xad0 <cinta+0x16>
 ac2:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <NumCarSecado>
 ac6:	81 11       	cpse	r24, r1
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <cinta+0x16>
		stopCinta();
 aca:	0e 94 54 05 	call	0xaa8	; 0xaa8 <stopCinta>
 ace:	08 95       	ret
	}
	else{	// Algún vehículo
		moveCinta();
 ad0:	0e 94 4b 05 	call	0xa96	; 0xa96 <moveCinta>
 ad4:	08 95       	ret

00000ad6 <setup_semaforo>:
///////////////////////////////////////
//////////	SEMÁFORO LEDs	 //////////
///////////////////////////////////////

void setup_semaforo(){ //Inicialización Semáforo: LED4 y LED5
	setBit(REG_LED_DDR, PIN_L4_DDR);	// GREEN: Establecer LED 4 pin como salida
 ad6:	ea e0       	ldi	r30, 0x0A	; 10
 ad8:	f1 e0       	ldi	r31, 0x01	; 1
 ada:	80 81       	ld	r24, Z
 adc:	88 60       	ori	r24, 0x08	; 8
 ade:	80 83       	st	Z, r24
	setBit(	REG_LED_DDR, PIN_L5_DDR);	// RED: Establecer LED 5 pin como salida
 ae0:	80 81       	ld	r24, Z
 ae2:	80 62       	ori	r24, 0x20	; 32
 ae4:	80 83       	st	Z, r24
 ae6:	08 95       	ret

00000ae8 <off_Semaforo>:
}

void off_Semaforo() {
	clearBit(REG_LED_PORT, PIN_L4_PORT);	// GREEN: Apagado
 ae8:	eb e0       	ldi	r30, 0x0B	; 11
 aea:	f1 e0       	ldi	r31, 0x01	; 1
 aec:	80 81       	ld	r24, Z
 aee:	87 7f       	andi	r24, 0xF7	; 247
 af0:	80 83       	st	Z, r24
	setBit(REG_LED_PORT, PIN_L5_PORT);		// RED: Encendido
 af2:	80 81       	ld	r24, Z
 af4:	80 62       	ori	r24, 0x20	; 32
 af6:	80 83       	st	Z, r24
 af8:	08 95       	ret

00000afa <semaforo>:
}

void semaforo(){ //LED_4_5
	if (NumCarLavado == 0 && NumCarSecado == 0){	// Ningún vehículo
 afa:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <NumCarLavado>
 afe:	81 11       	cpse	r24, r1
 b00:	0d c0       	rjmp	.+26     	; 0xb1c <semaforo+0x22>
 b02:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <NumCarSecado>
 b06:	81 11       	cpse	r24, r1
 b08:	09 c0       	rjmp	.+18     	; 0xb1c <semaforo+0x22>
		clearBit(REG_LED_PORT, PIN_L4_PORT);	// GREEN: Apagado
 b0a:	eb e0       	ldi	r30, 0x0B	; 11
 b0c:	f1 e0       	ldi	r31, 0x01	; 1
 b0e:	80 81       	ld	r24, Z
 b10:	87 7f       	andi	r24, 0xF7	; 247
 b12:	80 83       	st	Z, r24
		clearBit(REG_LED_PORT, PIN_L5_PORT);	// RED: Apagado
 b14:	80 81       	ld	r24, Z
 b16:	8f 7d       	andi	r24, 0xDF	; 223
 b18:	80 83       	st	Z, r24
 b1a:	08 95       	ret
	}
	else{	// Algún vehículo
		
		if(isBitSet(REG_SOB_PIN, PIN_SO10_PIN) && isClrSet(REG_SOD_PIN, PIN_SO11_PIN) && isClrSet(REG_SOB_PIN, PIN_SO12_PIN)){
 b1c:	1d 9b       	sbis	0x03, 5	; 3
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <semaforo+0x40>
 b20:	4d 99       	sbic	0x09, 5	; 9
 b22:	0b c0       	rjmp	.+22     	; 0xb3a <semaforo+0x40>
 b24:	1a 99       	sbic	0x03, 2	; 3
 b26:	09 c0       	rjmp	.+18     	; 0xb3a <semaforo+0x40>
			// No hay coche liberado de la cinta (SO10 && not_SO11 && not_SO12)
			clearBit(REG_LED_PORT, PIN_L4_PORT);	// GREEN: Apagado
 b28:	eb e0       	ldi	r30, 0x0B	; 11
 b2a:	f1 e0       	ldi	r31, 0x01	; 1
 b2c:	80 81       	ld	r24, Z
 b2e:	87 7f       	andi	r24, 0xF7	; 247
 b30:	80 83       	st	Z, r24
			setBit(REG_LED_PORT, PIN_L5_PORT);		// RED: Encendido
 b32:	80 81       	ld	r24, Z
 b34:	80 62       	ori	r24, 0x20	; 32
 b36:	80 83       	st	Z, r24
 b38:	08 95       	ret
		}
		else {
			// Coche liberado de la cinta
			setBit(REG_LED_PORT, PIN_L4_PORT);		// GREEN: Encendido
 b3a:	eb e0       	ldi	r30, 0x0B	; 11
 b3c:	f1 e0       	ldi	r31, 0x01	; 1
 b3e:	80 81       	ld	r24, Z
 b40:	88 60       	ori	r24, 0x08	; 8
 b42:	80 83       	st	Z, r24
			clearBit(REG_LED_PORT, PIN_L5_PORT);	// RED: Apagado
 b44:	80 81       	ld	r24, Z
 b46:	8f 7d       	andi	r24, 0xDF	; 223
 b48:	80 83       	st	Z, r24
 b4a:	08 95       	ret

00000b4c <setup_Parte3>:
///////////////////////////////
///////		 COMÚN		///////
///////////////////////////////

void setup_Parte3(){
	cli();
 b4c:	f8 94       	cli
	setupCinta();
 b4e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <setupCinta>
	setup_semaforo();
 b52:	0e 94 6b 05 	call	0xad6	; 0xad6 <setup_semaforo>
	setup_ParadaEmergencia();
 b56:	0e 94 0a 02 	call	0x414	; 0x414 <setup_ParadaEmergencia>
	sei();
 b5a:	78 94       	sei
 b5c:	08 95       	ret

00000b5e <Parte_3>:
}

void Parte_3(){	//loop
	cinta();
 b5e:	0e 94 5d 05 	call	0xaba	; 0xaba <cinta>
	semaforo();
 b62:	0e 94 7d 05 	call	0xafa	; 0xafa <semaforo>
 b66:	08 95       	ret

00000b68 <__udivmodsi4>:
 b68:	a1 e2       	ldi	r26, 0x21	; 33
 b6a:	1a 2e       	mov	r1, r26
 b6c:	aa 1b       	sub	r26, r26
 b6e:	bb 1b       	sub	r27, r27
 b70:	fd 01       	movw	r30, r26
 b72:	0d c0       	rjmp	.+26     	; 0xb8e <__udivmodsi4_ep>

00000b74 <__udivmodsi4_loop>:
 b74:	aa 1f       	adc	r26, r26
 b76:	bb 1f       	adc	r27, r27
 b78:	ee 1f       	adc	r30, r30
 b7a:	ff 1f       	adc	r31, r31
 b7c:	a2 17       	cp	r26, r18
 b7e:	b3 07       	cpc	r27, r19
 b80:	e4 07       	cpc	r30, r20
 b82:	f5 07       	cpc	r31, r21
 b84:	20 f0       	brcs	.+8      	; 0xb8e <__udivmodsi4_ep>
 b86:	a2 1b       	sub	r26, r18
 b88:	b3 0b       	sbc	r27, r19
 b8a:	e4 0b       	sbc	r30, r20
 b8c:	f5 0b       	sbc	r31, r21

00000b8e <__udivmodsi4_ep>:
 b8e:	66 1f       	adc	r22, r22
 b90:	77 1f       	adc	r23, r23
 b92:	88 1f       	adc	r24, r24
 b94:	99 1f       	adc	r25, r25
 b96:	1a 94       	dec	r1
 b98:	69 f7       	brne	.-38     	; 0xb74 <__udivmodsi4_loop>
 b9a:	60 95       	com	r22
 b9c:	70 95       	com	r23
 b9e:	80 95       	com	r24
 ba0:	90 95       	com	r25
 ba2:	9b 01       	movw	r18, r22
 ba4:	ac 01       	movw	r20, r24
 ba6:	bd 01       	movw	r22, r26
 ba8:	cf 01       	movw	r24, r30
 baa:	08 95       	ret

00000bac <_exit>:
 bac:	f8 94       	cli

00000bae <__stop_program>:
 bae:	ff cf       	rjmp	.-2      	; 0xbae <__stop_program>
