
Lavadero_v2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000adc  00000b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800212  00800212  00000b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a62  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbd  00000000  00000000  000028ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f2  00000000  00000000  00003877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  0000496c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000954  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000427  00000000  00000000  00005848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00005c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_1>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_9>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_32>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_42>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_47>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ec ed       	ldi	r30, 0xDC	; 220
  f8:	fa e0       	ldi	r31, 0x0A	; 10
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 31       	cpi	r26, 0x12	; 18
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a2 e1       	ldi	r26, 0x12	; 18
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ae 32       	cpi	r26, 0x2E	; 46
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
 11a:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <setStop>:
	}
	
	// NumCarSecado
	uint8_t getNumCarSecado(void){ // Devuelve número coches en lavadero
		return NumCarSecado;
	}
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <Stop>
 128:	08 95       	ret

0000012a <setupTimers>:
 12a:	f8 94       	cli
 12c:	8b e2       	ldi	r24, 0x2B	; 43
 12e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
 132:	85 e1       	ldi	r24, 0x15	; 21
 134:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
 138:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	96 e0       	ldi	r25, 0x06	; 6
 140:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
 144:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
 148:	8f e5       	ldi	r24, 0x5F	; 95
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f008b>
 150:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f008a>
 154:	8f e1       	ldi	r24, 0x1F	; 31
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7f008d>
 15c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7f008c>
 160:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f00a0>
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f00a1>
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7f0072>
 170:	21 e1       	ldi	r18, 0x11	; 17
 172:	3a e7       	ldi	r19, 0x7A	; 122
 174:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f00a9>
 178:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f00a8>
 17c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f0090>
 180:	9a e0       	ldi	r25, 0x0A	; 10
 182:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
 186:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f0071>
 18a:	87 ee       	ldi	r24, 0xE7	; 231
 18c:	93 e0       	ldi	r25, 0x03	; 3
 18e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f0099>
 192:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f0098>
 196:	78 94       	sei
 198:	08 95       	ret

0000019a <millis>:
 19a:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <ms>
 19e:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <ms+0x1>
 1a2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <ms+0x2>
 1a6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <ms+0x3>
 1aa:	08 95       	ret

000001ac <decNumCarLavado>:
 1ac:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 1b0:	88 23       	and	r24, r24
 1b2:	29 f0       	breq	.+10     	; 0x1be <decNumCarLavado+0x12>
 1b4:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <NumCarLavado>
 1be:	08 95       	ret

000001c0 <incNumCarSecado>:

	void incNumCarSecado(void){ // Incrementa en uno el contador de coches en lavadero
		NumCarSecado++;
 1c0:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <NumCarSecado>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <NumCarSecado>
 1ca:	08 95       	ret

000001cc <decNumCarSecado>:
	}

	void decNumCarSecado(void){ // Decrementa en uno el contador de coches en lavadero
		if(NumCarSecado > 0) {
 1cc:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <NumCarSecado>
 1d0:	88 23       	and	r24, r24
 1d2:	29 f0       	breq	.+10     	; 0x1de <decNumCarSecado+0x12>
			NumCarSecado--;
 1d4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <NumCarSecado>
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <NumCarSecado>
 1de:	08 95       	ret

000001e0 <setup_General>:
///////////////////////////////////
////// INICIALIZACIÓN COMÚN ///////
///////////////////////////////////

void setup_General(void){ //Incluir todas funciones inicialización
	setupTimers();
 1e0:	0e 94 95 00 	call	0x12a	; 0x12a <setupTimers>
 1e4:	08 95       	ret

000001e6 <setup_sensores_integration>:
// Funciones

	// Sensores: SO1, SO3, SO6, SO10, SO11 y SO12	 *********	Comprobar si faltan	*********
	
 void setup_sensores_integration(){
	 cli();
 1e6:	f8 94       	cli
	 //SO1 [SOB] PB0(PCINT0)
	 clearBit(REG_SOB_DDR, PIN_SO1_DDR); // Entrada
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	8e 7f       	andi	r24, 0xFE	; 254
 1ec:	84 b9       	out	0x04, r24	; 4
	 // Configuro interrupción por cambio PCINT0
	 setBit(PCMSK0, PCINT0); // Habilito mascara interrupción
 1ee:	eb e6       	ldi	r30, 0x6B	; 107
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
	 setBit(PCICR, PCIE0); // Habilito registro interrupción
 1f8:	a8 e6       	ldi	r26, 0x68	; 104
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	8c 91       	ld	r24, X
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	8c 93       	st	X, r24
	 setBit(PCIFR, PCIF0); // Borro bandera
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	81 60       	ori	r24, 0x01	; 1
 206:	8b bb       	out	0x1b, r24	; 27

	 //SO3 [SOB] PB1(PCINT1)
	 clearBit(REG_SOB_DDR, PIN_SO3_DDR); // Entrada
 208:	84 b1       	in	r24, 0x04	; 4
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	84 b9       	out	0x04, r24	; 4
	 // Configura interrupción por cambio PCINT1 junto PCINT0
	 setBit(PCMSK0, PCINT1); // Habilito mascara interrupción
 20e:	80 81       	ld	r24, Z
 210:	82 60       	ori	r24, 0x02	; 2
 212:	80 83       	st	Z, r24
	 
	 //SO6 [SOB] (PCINT4)
	 clearBit(REG_SOB_DDR, PIN_SO6_DDR); // Entrada
 214:	84 b1       	in	r24, 0x04	; 4
 216:	8f 7e       	andi	r24, 0xEF	; 239
 218:	84 b9       	out	0x04, r24	; 4
	 // Configura interrupción por cambio PCINT4 junto PCINT0
	 setBit(PCMSK0, PCINT4); // Habilito mascara interrupción
 21a:	80 81       	ld	r24, Z
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	80 83       	st	Z, r24

	 //SO10 [SOB] PB5
	 clearBit(REG_SOB_DDR, PIN_SO10_DDR); // Entrada
 220:	84 b1       	in	r24, 0x04	; 4
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	84 b9       	out	0x04, r24	; 4

	 //SO11 [SOD] PD5
	 clearBit(REG_SOD_DDR, PIN_SO11_DDR); // Entrada
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	8f 7d       	andi	r24, 0xDF	; 223
 22a:	8a b9       	out	0x0a, r24	; 10

	 //SO12 [SOB] PB2 (PCINT2)
	 clearBit(REG_SOB_DDR, PIN_SO12_DDR); // Entrada
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	8b 7f       	andi	r24, 0xFB	; 251
 230:	84 b9       	out	0x04, r24	; 4
	 // Configura interrupción por cambio PCINT2 junto PCINT0
	 setBit(PCMSK0, PCINT2); // Habilito mascara interrupción
 232:	80 81       	ld	r24, Z
 234:	84 60       	ori	r24, 0x04	; 4
 236:	80 83       	st	Z, r24
	 
	 sei();
 238:	78 94       	sei
 23a:	08 95       	ret

0000023c <setup_Integration>:
  ///////////////////
  ////// COMÚN///////
  ///////////////////
  
   void setup_Integration(){
	   setup_sensores_integration();
 23c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setup_sensores_integration>
 240:	08 95       	ret

00000242 <__vector_42>:

 ////////////////////////////////////////////////
 ////// INTERRUPCIONES TIMERS INTEGRACIÓN ///////
 ////////////////////////////////////////////////
 
 ISR(TIMER4_COMPA_vect){ // Segundos
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
	 s++;
 254:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <s>
 258:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <s+0x1>
 25c:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <s+0x2>
 260:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <s+0x3>
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	a1 1d       	adc	r26, r1
 268:	b1 1d       	adc	r27, r1
 26a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <s>
 26e:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <s+0x1>
 272:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <s+0x2>
 276:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <s+0x3>
	 if(enable_prove_new == 1) {		//--------------------------------------------------------------------------------------------------------NUEVO LEYRE
 27a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <enable_prove_new>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	99 f4       	brne	.+38     	; 0x2a8 <__vector_42+0x66>
		 cnt_prove_new++;
 282:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 286:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 28a:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
 28e:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	a1 1d       	adc	r26, r1
 296:	b1 1d       	adc	r27, r1
 298:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
 29c:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 2a0:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <__data_end+0x2>
 2a4:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <__data_end+0x3>
	 }
	 if (cnt_prove_new > Tiempo_prove_new && NumCarLavado > 0 && enable_prove_new == 0){
 2a8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 2ac:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 2b0:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
 2b4:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
 2b8:	c3 97       	sbiw	r24, 0x33	; 51
 2ba:	a1 05       	cpc	r26, r1
 2bc:	b1 05       	cpc	r27, r1
 2be:	90 f0       	brcs	.+36     	; 0x2e4 <__vector_42+0xa2>
 2c0:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 2c4:	88 23       	and	r24, r24
 2c6:	71 f0       	breq	.+28     	; 0x2e4 <__vector_42+0xa2>
 2c8:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <enable_prove_new>
 2cc:	81 11       	cpse	r24, r1
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <__vector_42+0xa2>
		 NumCarLavado--;
 2d0:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <NumCarLavado>
		 EnableEntrance = 1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		 enable_prove_new = 0;
 2e0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <enable_prove_new>
	 }
 }
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_32>:

 ISR(TIMER3_COMPA_vect){ // Milisegundos
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
	 ms++;
 318:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <ms>
 31c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <ms+0x1>
 320:	a0 91 1b 02 	lds	r26, 0x021B	; 0x80021b <ms+0x2>
 324:	b0 91 1c 02 	lds	r27, 0x021C	; 0x80021c <ms+0x3>
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	a1 1d       	adc	r26, r1
 32c:	b1 1d       	adc	r27, r1
 32e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <ms>
 332:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <ms+0x1>
 336:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <ms+0x2>
 33a:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <ms+0x3>
	 
	 if(ms % Check_height_sensors == 0){
 33e:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <ms>
 342:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <ms+0x1>
 346:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <ms+0x2>
 34a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <ms+0x3>
 34e:	22 e3       	ldi	r18, 0x32	; 50
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	0e 94 4a 05 	call	0xa94	; 0xa94 <__udivmodsi4>
 35a:	67 2b       	or	r22, r23
 35c:	68 2b       	or	r22, r24
 35e:	69 2b       	or	r22, r25
 360:	51 f5       	brne	.+84     	; 0x3b6 <__vector_32+0xc0>
		enable_check_parte1 = 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <enable_check_parte1>
		
		// Actualizo señales - Lavadero Horizontal
		so3 = isBitSet(REG_SOB_PIN,PIN_SO3_PIN);
 368:	93 b1       	in	r25, 0x03	; 3
 36a:	92 70       	andi	r25, 0x02	; 2
 36c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <so3>
		so4 = isBitSet(REG_SOK_PIN,PIN_SO4_PIN);
 370:	e6 e0       	ldi	r30, 0x06	; 6
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	90 81       	ld	r25, Z
 376:	90 72       	andi	r25, 0x20	; 32
 378:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <so4>
		so5 = isBitSet(REG_SOK_PIN,PIN_SO5_PIN);
 37c:	90 81       	ld	r25, Z
 37e:	92 70       	andi	r25, 0x02	; 2
 380:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <so5>
		limit_switch_lavH = isClrSet(REG_SW_PIN,PIN_SW2_PIN); // isClrSet porque SW2 '0' al detectar
 384:	99 b1       	in	r25, 0x09	; 9
 386:	96 95       	lsr	r25
 388:	98 27       	eor	r25, r24
 38a:	91 70       	andi	r25, 0x01	; 1
 38c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <limit_switch_lavH>
		 
		// Actualizo señales - Secado
		so7 = isBitSet(REG_SOB_PIN,PIN_SO7_PIN);
 390:	93 b1       	in	r25, 0x03	; 3
 392:	98 70       	andi	r25, 0x08	; 8
 394:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <so7>
		so8 = isBitSet(REG_SOK_PIN,PIN_SO8_PIN);
 398:	90 81       	ld	r25, Z
 39a:	90 78       	andi	r25, 0x80	; 128
 39c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <so8>
		so9 = isBitSet(REG_SOK_PIN,PIN_SO9_PIN);
 3a0:	90 81       	ld	r25, Z
 3a2:	98 70       	andi	r25, 0x08	; 8
 3a4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <so9>
		limit_switch_sec = isClrSet(REG_SW_PIN,PIN_SW3_PIN); // isClrSet porque SW3 '0' al detectar
 3a8:	99 b1       	in	r25, 0x09	; 9
 3aa:	96 95       	lsr	r25
 3ac:	96 95       	lsr	r25
 3ae:	89 27       	eor	r24, r25
 3b0:	81 70       	andi	r24, 0x01	; 1
 3b2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <limit_switch_sec>
	 }
 }
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_1>:

 //////////////////////////////////////
 ////// INTERRUPCIONES SENSORES ///////
 //////////////////////////////////////
 
 ISR(INT0_vect){ //Parada de emergencia
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	 // SW4 al soltar boton [PD0] (INT0)
	 ParadaEmergencia();
 3fa:	0e 94 39 05 	call	0xa72	; 0xa72 <ParadaEmergencia>
 }
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <__vector_9>:
 
 ISR(PCINT0_vect){
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	cf 93       	push	r28
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
	 //SO1 [SOB] (PCINT0)
	 if (isBitSet(REG_SOB_PIN,PIN_SO1_PIN) && reg_SO1 == 0){ // Flanco subida
 444:	18 9b       	sbis	0x03, 0	; 3
 446:	08 c0       	rjmp	.+16     	; 0x458 <__vector_9+0x38>
 448:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <reg_SO1>
 44c:	81 11       	cpse	r24, r1
 44e:	04 c0       	rjmp	.+8      	; 0x458 <__vector_9+0x38>
		 //closeBarrera(); // Pendiente Parte2
		 reg_SO1 = 1; // Actualizo registro SO1 con valor actual
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <reg_SO1>
 456:	6f c0       	rjmp	.+222    	; 0x536 <__vector_9+0x116>
	 }
	 else if (isClrSet(REG_SOB_PIN,PIN_SO1_PIN) && (reg_SO1 == 1) && (EnableEntrance == 1)){ // Flanco bajada y entrada habilitada
 458:	18 99       	sbic	0x03, 0	; 3
 45a:	1b c0       	rjmp	.+54     	; 0x492 <__vector_9+0x72>
 45c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <reg_SO1>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	b9 f4       	brne	.+46     	; 0x492 <__vector_9+0x72>
 464:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	99 f4       	brne	.+38     	; 0x492 <__vector_9+0x72>
		 NumCarLavado++;		// Ha entrado coche
 46c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <NumCarLavado>
		 enable_prove_new = 1; // Activo comprobación entrada
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <enable_prove_new>
		 cnt_prove_new = 0;
 47c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
 480:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
 484:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end+0x2>
 488:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x3>
		 //moveCinta(); //--------------------------------------------------------------------------------------------------------------- Mejor ponerlo por consulta periódica en main???
		 //openBarrera(); // Pendiente Parte2
		 //on_LavHorizontal(); // Pendiente Parte1
		 //on_LavVertical(); // Pendiente Parte2
		 
		 reg_SO1 = 0; // Actualizo registro SO1 con valor actual
 48c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <reg_SO1>
 490:	52 c0       	rjmp	.+164    	; 0x536 <__vector_9+0x116>
	 }
	 //SO3 [SOL] *PB1*(*PCINT1*) -- MODIFICACIÓN PROPUESTA POR NACHO :) --
	 else if (isClrSet(REG_SOB_PIN,PIN_SO3_PIN) && reg_SO3 == 1 && enable_prove_new == 1 && cnt_prove_new < Tiempo_prove_new){ // Flanco bajada y entrada habilitada
 492:	19 99       	sbic	0x03, 1	; 3
 494:	19 c0       	rjmp	.+50     	; 0x4c8 <__vector_9+0xa8>
 496:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <reg_SO3>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	a9 f4       	brne	.+42     	; 0x4c8 <__vector_9+0xa8>
 49e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <enable_prove_new>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	89 f4       	brne	.+34     	; 0x4c8 <__vector_9+0xa8>
 4a6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 4aa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 4ae:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
 4b2:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
 4b6:	c2 97       	sbiw	r24, 0x32	; 50
 4b8:	a1 05       	cpc	r26, r1
 4ba:	b1 05       	cpc	r27, r1
 4bc:	28 f4       	brcc	.+10     	; 0x4c8 <__vector_9+0xa8>
		 enable_prove_new = 0;
 4be:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <enable_prove_new>
		 
		 reg_SO3 = 0; // Actualizo registro SO3 con valor actual
 4c2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <reg_SO3>
 4c6:	37 c0       	rjmp	.+110    	; 0x536 <__vector_9+0x116>
	 }
	 
	 else if (isBitSet(REG_SOB_PIN,PIN_SO3_PIN) && reg_SO3 == 0 ){ // Flanco subida
 4c8:	19 9b       	sbis	0x03, 1	; 3
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <__vector_9+0xbc>
 4cc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <reg_SO3>
 4d0:	81 11       	cpse	r24, r1
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__vector_9+0xbc>
		 reg_SO3 = 1; // Actualizo registro SO3 con valor actual
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <reg_SO3>
 4da:	2d c0       	rjmp	.+90     	; 0x536 <__vector_9+0x116>
	 }
	 
	 //SO6 [SOB] (PCINT4)
	 else if (isBitSet(REG_SOB_PIN,PIN_SO6_PIN) && reg_SO6 == 0){ // Flanco subida - Paso del culo
 4dc:	1c 9b       	sbis	0x03, 4	; 3
 4de:	0c c0       	rjmp	.+24     	; 0x4f8 <__vector_9+0xd8>
 4e0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <reg_SO6>
 4e4:	81 11       	cpse	r24, r1
 4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <__vector_9+0xd8>
		 EnableEntrance = 1;
 4e8:	c1 e0       	ldi	r28, 0x01	; 1
 4ea:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__DATA_REGION_ORIGIN__>
		 decNumCarLavado();
 4ee:	0e 94 d6 00 	call	0x1ac	; 0x1ac <decNumCarLavado>
		 
		 reg_SO6 = 1; // Actualizo registro SO6 con valor actual
 4f2:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <reg_SO6>
 4f6:	1f c0       	rjmp	.+62     	; 0x536 <__vector_9+0x116>
	 }
	 
	 else if (isClrSet(REG_SOB_PIN,PIN_SO6_PIN) && reg_SO6 == 1){ // Flanco bajada - Paso del morro
 4f8:	1c 99       	sbic	0x03, 4	; 3
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <__vector_9+0xee>
 4fc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <reg_SO6>
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	29 f4       	brne	.+10     	; 0x50e <__vector_9+0xee>
		 incNumCarSecado();
 504:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <incNumCarSecado>
		 reg_SO6 = 0;
 508:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <reg_SO6>
 50c:	14 c0       	rjmp	.+40     	; 0x536 <__vector_9+0x116>
	 }
	 
	 //SO12 [SOB] PB2 (PCINT2)
	 else if (isBitSet(REG_SOB_PIN,PIN_SO12_PIN) && reg_SO12 == 0){ // Flanco subida
 50e:	1a 9b       	sbis	0x03, 2	; 3
 510:	0a c0       	rjmp	.+20     	; 0x526 <__vector_9+0x106>
 512:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <reg_SO12>
 516:	81 11       	cpse	r24, r1
 518:	06 c0       	rjmp	.+12     	; 0x526 <__vector_9+0x106>
		 decNumCarSecado();
 51a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <decNumCarSecado>
		 
		 reg_SO12 = 1; // Actualizo registro SO12 con valor actual
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <reg_SO12>
 524:	08 c0       	rjmp	.+16     	; 0x536 <__vector_9+0x116>
	 }
	 
	 else if (isClrSet(REG_SOB_PIN,PIN_SO12_PIN) && reg_SO12 == 1){ // Flanco bajada
 526:	1a 99       	sbic	0x03, 2	; 3
 528:	06 c0       	rjmp	.+12     	; 0x536 <__vector_9+0x116>
 52a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <reg_SO12>
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	11 f4       	brne	.+4      	; 0x536 <__vector_9+0x116>
		 reg_SO12 = 0; // Actualizo registro SO12 con valor actual
 532:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <reg_SO12>
	 }
	 
 }
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	cf 91       	pop	r28
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <main>:
	sei();
}
*/

int main(void) {
	setup_General();
 55a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <setup_General>
	setup_Parte1();
 55e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <setup_Parte1>
	setup_Parte2();
 562:	0e 94 c9 04 	call	0x992	; 0x992 <setup_Parte2>
	setup_Parte3();
 566:	0e 94 3c 05 	call	0xa78	; 0xa78 <setup_Parte3>
	setup_Integration();
 56a:	0e 94 1e 01 	call	0x23c	; 0x23c <setup_Integration>

	while(1) {
		Parte_1();
 56e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Parte_1>
		Parte_2();
 572:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Parte_2>
		Parte_3();
 576:	0e 94 45 05 	call	0xa8a	; 0xa8a <Parte_3>
 57a:	f9 cf       	rjmp	.-14     	; 0x56e <main+0x14>

0000057c <setup_LavHorizontal>:
//////////////////////////////////


void setup_LavHorizontal(){ // Inicialización
	// Motor 3: Altura rodillo H
	setBit(REG_M3_en_DDR,PIN_M3_en_DDR); // Definir como salida
 57c:	8a b1       	in	r24, 0x0a	; 10
 57e:	80 61       	ori	r24, 0x10	; 16
 580:	8a b9       	out	0x0a, r24	; 10
	setBit(REG_M3_di_DDR,PIN_M3_di_DDR);
 582:	ea e0       	ldi	r30, 0x0A	; 10
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	80 81       	ld	r24, Z
 588:	80 61       	ori	r24, 0x10	; 16
 58a:	80 83       	st	Z, r24
	setBit(REG_M3_en_PORT,PIN_M3_en_PORT); // Subir rodillo
 58c:	8b b1       	in	r24, 0x0b	; 11
 58e:	80 61       	ori	r24, 0x10	; 16
 590:	8b b9       	out	0x0b, r24	; 11
	clearBit(REG_M3_di_PORT,PIN_M3_di_PORT);
 592:	eb e0       	ldi	r30, 0x0B	; 11
 594:	f1 e0       	ldi	r31, 0x01	; 1
 596:	80 81       	ld	r24, Z
 598:	8f 7e       	andi	r24, 0xEF	; 239
 59a:	80 83       	st	Z, r24
	
	// Motor 4: Giro rodillo
	setBit(REG_M4_en_DDR,PIN_M4_en_DDR); // Definir como salida
 59c:	8a b1       	in	r24, 0x0a	; 10
 59e:	80 64       	ori	r24, 0x40	; 64
 5a0:	8a b9       	out	0x0a, r24	; 10
	clearBit(REG_M4_en_PORT,PIN_M4_en_PORT); // Apagado de inicio
 5a2:	8b b1       	in	r24, 0x0b	; 11
 5a4:	8f 7b       	andi	r24, 0xBF	; 191
 5a6:	8b b9       	out	0x0b, r24	; 11
 5a8:	08 95       	ret

000005aa <up_LavHorizontal>:


	// LAVADERO HORIZONTAL - ALTURA

void up_LavHorizontal(){
	setBit(REG_M3_en_PORT,PIN_M3_en_PORT);
 5aa:	8b b1       	in	r24, 0x0b	; 11
 5ac:	80 61       	ori	r24, 0x10	; 16
 5ae:	8b b9       	out	0x0b, r24	; 11
	setBit(REG_M3_di_PORT,PIN_M3_di_PORT);
 5b0:	eb e0       	ldi	r30, 0x0B	; 11
 5b2:	f1 e0       	ldi	r31, 0x01	; 1
 5b4:	80 81       	ld	r24, Z
 5b6:	80 61       	ori	r24, 0x10	; 16
 5b8:	80 83       	st	Z, r24
 5ba:	08 95       	ret

000005bc <down_LavHorizontal>:
}

void down_LavHorizontal(){
	setBit(REG_M3_en_PORT,PIN_M3_en_PORT);
 5bc:	8b b1       	in	r24, 0x0b	; 11
 5be:	80 61       	ori	r24, 0x10	; 16
 5c0:	8b b9       	out	0x0b, r24	; 11
	clearBit(REG_M3_di_PORT,PIN_M3_di_PORT); // COMPROBAR EN MAQUETA si es ~[setBit() o clearBit()]
 5c2:	eb e0       	ldi	r30, 0x0B	; 11
 5c4:	f1 e0       	ldi	r31, 0x01	; 1
 5c6:	80 81       	ld	r24, Z
 5c8:	8f 7e       	andi	r24, 0xEF	; 239
 5ca:	80 83       	st	Z, r24
 5cc:	08 95       	ret

000005ce <stop_AlturaH>:
}

void stop_AlturaH(){
	clearBit(REG_M3_en_PORT,PIN_M3_en_PORT);
 5ce:	8b b1       	in	r24, 0x0b	; 11
 5d0:	8f 7e       	andi	r24, 0xEF	; 239
 5d2:	8b b9       	out	0x0b, r24	; 11
 5d4:	08 95       	ret

000005d6 <on_LavHorizontal>:


	// LAVADERO HORIZONTAL - GIRO

void on_LavHorizontal(){
	setBit(REG_M4_en_PORT,PIN_M4_en_PORT);
 5d6:	8b b1       	in	r24, 0x0b	; 11
 5d8:	80 64       	ori	r24, 0x40	; 64
 5da:	8b b9       	out	0x0b, r24	; 11
 5dc:	08 95       	ret

000005de <off_LavHorizontal>:
}

void off_LavHorizontal(){
	clearBit(REG_M4_en_PORT,PIN_M4_en_PORT);
 5de:	8b b1       	in	r24, 0x0b	; 11
 5e0:	8f 7b       	andi	r24, 0xBF	; 191
 5e2:	8b b9       	out	0x0b, r24	; 11
 5e4:	08 95       	ret

000005e6 <lavaderoHorizontal>:
}

void lavaderoHorizontal(){

	if((so3p==so3) && (so4p==so4) && (so5p==so5)){  //Si los valores son los mismos que en instante anterior
 5e6:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <so3p>
 5ea:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 5ee:	98 13       	cpse	r25, r24
 5f0:	10 c0       	rjmp	.+32     	; 0x612 <lavaderoHorizontal+0x2c>
 5f2:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <so4p>
 5f6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <so4>
 5fa:	98 13       	cpse	r25, r24
 5fc:	0a c0       	rjmp	.+20     	; 0x612 <lavaderoHorizontal+0x2c>
 5fe:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <so5p>
 602:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <so5>
 606:	98 13       	cpse	r25, r24
 608:	04 c0       	rjmp	.+8      	; 0x612 <lavaderoHorizontal+0x2c>
		aux_lavH = 1;		  //muevo el rodillo
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <aux_lavH>
 610:	02 c0       	rjmp	.+4      	; 0x616 <lavaderoHorizontal+0x30>
	}
	else{
		aux_lavH = 0;		  //no hago nada
 612:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <aux_lavH>
	}
	
	if (limit_switch_lavH == 1 && isBitSet(REG_M3_en_PORT,PIN_M3_en_PORT)){  // devuelve '1' si detecta fin de carrera Y si el motor esta encendido
 616:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <limit_switch_lavH>
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	61 f4       	brne	.+24     	; 0x636 <lavaderoHorizontal+0x50>
 61e:	5c 9b       	sbis	0x0b, 4	; 11
 620:	0a c0       	rjmp	.+20     	; 0x636 <lavaderoHorizontal+0x50>
		off_LavHorizontal(); //deja de girar el rodillo
 622:	0e 94 ef 02 	call	0x5de	; 0x5de <off_LavHorizontal>
		toggleBit(REG_M3_di_PORT,PIN_M3_di_PORT); // cambia el sentido del motor
 626:	eb e0       	ldi	r30, 0x0B	; 11
 628:	f1 e0       	ldi	r31, 0x01	; 1
 62a:	90 81       	ld	r25, Z
 62c:	80 e1       	ldi	r24, 0x10	; 16
 62e:	89 27       	eor	r24, r25
 630:	80 83       	st	Z, r24
		stop_AlturaH(); //se para el rodillo
 632:	0e 94 e7 02 	call	0x5ce	; 0x5ce <stop_AlturaH>
	}
	
	if(aux_lavH){		//si los valores de los sensores son los mismos que en instante anterior (antirrebotes)
 636:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <aux_lavH>
 63a:	88 23       	and	r24, r24
 63c:	09 f1       	breq	.+66     	; 0x680 <lavaderoHorizontal+0x9a>
		if (so4==0 && so3!=0){		//detecta abajo pero no a los lados
 63e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <so4>
 642:	81 11       	cpse	r24, r1
 644:	09 c0       	rjmp	.+18     	; 0x658 <lavaderoHorizontal+0x72>
 646:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 64a:	88 23       	and	r24, r24
 64c:	29 f0       	breq	.+10     	; 0x658 <lavaderoHorizontal+0x72>
			stop_AlturaH();
 64e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <stop_AlturaH>
			on_LavHorizontal();
 652:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <on_LavHorizontal>
 656:	14 c0       	rjmp	.+40     	; 0x680 <lavaderoHorizontal+0x9a>
			} else if(so3==0){					//detecta alguno de los lados
 658:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 65c:	81 11       	cpse	r24, r1
 65e:	05 c0       	rjmp	.+10     	; 0x66a <lavaderoHorizontal+0x84>
			up_LavHorizontal();  //sube el rodillo
 660:	0e 94 d5 02 	call	0x5aa	; 0x5aa <up_LavHorizontal>
			on_LavHorizontal();  //empieza a girar el rodillo
 664:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <on_LavHorizontal>
 668:	0b c0       	rjmp	.+22     	; 0x680 <lavaderoHorizontal+0x9a>
			} else if(limit_switch_lavH==0){												//no detecta nada
 66a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <limit_switch_lavH>
 66e:	81 11       	cpse	r24, r1
 670:	05 c0       	rjmp	.+10     	; 0x67c <lavaderoHorizontal+0x96>
			down_LavHorizontal();
 672:	0e 94 de 02 	call	0x5bc	; 0x5bc <down_LavHorizontal>
			on_LavHorizontal();
 676:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <on_LavHorizontal>
 67a:	02 c0       	rjmp	.+4      	; 0x680 <lavaderoHorizontal+0x9a>
			} else{
			off_LavHorizontal();
 67c:	0e 94 ef 02 	call	0x5de	; 0x5de <off_LavHorizontal>
		}
	}
	so3p = so3;
 680:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <so3>
 684:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <so3p>
	so4p = so4;
 688:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <so4>
 68c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <so4p>
	so5p = so5;
 690:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <so5>
 694:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <so5p>
 698:	08 95       	ret

0000069a <setup_secado>:
////// FUNCIONES SECADO ///////
///////////////////////////////

void setup_secado(){
	// Motor 5: Altura secador
	setBit(REG_M5_en_DDR,PIN_M5_en_DDR);
 69a:	84 b1       	in	r24, 0x04	; 4
 69c:	80 64       	ori	r24, 0x40	; 64
 69e:	84 b9       	out	0x04, r24	; 4
	setBit(REG_M5_di_DDR,PIN_M5_di_DDR);
 6a0:	8a b1       	in	r24, 0x0a	; 10
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	8a b9       	out	0x0a, r24	; 10
	setBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 6a6:	85 b1       	in	r24, 0x05	; 5
 6a8:	80 64       	ori	r24, 0x40	; 64
 6aa:	85 b9       	out	0x05, r24	; 5
	clearBit(REG_M5_di_PORT,PIN_M5_di_PORT);
 6ac:	8b b1       	in	r24, 0x0b	; 11
 6ae:	8f 77       	andi	r24, 0x7F	; 127
 6b0:	8b b9       	out	0x0b, r24	; 11
 6b2:	08 95       	ret

000006b4 <up_secado>:

}

void up_secado(){
	setBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 6b4:	85 b1       	in	r24, 0x05	; 5
 6b6:	80 64       	ori	r24, 0x40	; 64
 6b8:	85 b9       	out	0x05, r24	; 5
	setBit(REG_M5_di_PORT,PIN_M5_di_PORT);
 6ba:	8b b1       	in	r24, 0x0b	; 11
 6bc:	80 68       	ori	r24, 0x80	; 128
 6be:	8b b9       	out	0x0b, r24	; 11
 6c0:	08 95       	ret

000006c2 <down_secado>:
}

void down_secado(){
	setBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 6c2:	85 b1       	in	r24, 0x05	; 5
 6c4:	80 64       	ori	r24, 0x40	; 64
 6c6:	85 b9       	out	0x05, r24	; 5
	clearBit(REG_M5_di_PORT,PIN_M5_di_PORT);
 6c8:	8b b1       	in	r24, 0x0b	; 11
 6ca:	8f 77       	andi	r24, 0x7F	; 127
 6cc:	8b b9       	out	0x0b, r24	; 11
 6ce:	08 95       	ret

000006d0 <stop_secado>:
}

void stop_secado(){
	clearBit(REG_M5_en_PORT,PIN_M5_en_PORT);
 6d0:	85 b1       	in	r24, 0x05	; 5
 6d2:	8f 7b       	andi	r24, 0xBF	; 191
 6d4:	85 b9       	out	0x05, r24	; 5
 6d6:	08 95       	ret

000006d8 <secado>:
}

void secado(){

	if((so7p==so7) && (so8p==so8) && (so9p==so9)){  //Si los valores son los mismos que en instante anterior
 6d8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <so7p>
 6dc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 6e0:	98 13       	cpse	r25, r24
 6e2:	10 c0       	rjmp	.+32     	; 0x704 <secado+0x2c>
 6e4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <so8p>
 6e8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 6ec:	98 13       	cpse	r25, r24
 6ee:	0a c0       	rjmp	.+20     	; 0x704 <secado+0x2c>
 6f0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <so9p>
 6f4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 6f8:	98 13       	cpse	r25, r24
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <secado+0x2c>
		aux_sec = 1;          //muevo el secador
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <aux_sec>
 702:	02 c0       	rjmp	.+4      	; 0x708 <secado+0x30>
	}
	else{
		aux_sec = 0;          //no hago nada
 704:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <aux_sec>
	}
	
	if(aux_sec) {
 708:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <aux_sec>
 70c:	88 23       	and	r24, r24
 70e:	f1 f1       	breq	.+124    	; 0x78c <secado+0xb4>
		if( so8 && so7 && so9)                 // no detecta abajo
 710:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 714:	88 23       	and	r24, r24
 716:	59 f0       	breq	.+22     	; 0x72e <secado+0x56>
 718:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 71c:	88 23       	and	r24, r24
 71e:	39 f0       	breq	.+14     	; 0x72e <secado+0x56>
 720:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 724:	88 23       	and	r24, r24
 726:	19 f0       	breq	.+6      	; 0x72e <secado+0x56>
			down_secado();                    // baja
 728:	0e 94 61 03 	call	0x6c2	; 0x6c2 <down_secado>
 72c:	2f c0       	rjmp	.+94     	; 0x78c <secado+0xb4>
		else if( so8 || !(so7 && so9) )
 72e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 732:	81 11       	cpse	r24, r1
 734:	08 c0       	rjmp	.+16     	; 0x746 <secado+0x6e>
 736:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 73a:	88 23       	and	r24, r24
 73c:	21 f0       	breq	.+8      	; 0x746 <secado+0x6e>
 73e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 742:	81 11       	cpse	r24, r1
 744:	03 c0       	rjmp	.+6      	; 0x74c <secado+0x74>
			up_secado();
 746:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <up_secado>
 74a:	20 c0       	rjmp	.+64     	; 0x78c <secado+0xb4>
		else if( !(so8 || (so7 && so9)) )    // detecta abajo y en algun lateral
 74c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 750:	81 11       	cpse	r24, r1
 752:	0b c0       	rjmp	.+22     	; 0x76a <secado+0x92>
 754:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 758:	88 23       	and	r24, r24
 75a:	21 f0       	breq	.+8      	; 0x764 <secado+0x8c>
 75c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 760:	81 11       	cpse	r24, r1
 762:	03 c0       	rjmp	.+6      	; 0x76a <secado+0x92>
			up_secado();                    // sube
 764:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <up_secado>
 768:	11 c0       	rjmp	.+34     	; 0x78c <secado+0xb4>
		else if( !so8 && so7 && so9 )        // detecta abajo pero no en los laterales
 76a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 76e:	81 11       	cpse	r24, r1
 770:	0b c0       	rjmp	.+22     	; 0x788 <secado+0xb0>
 772:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 776:	88 23       	and	r24, r24
 778:	39 f0       	breq	.+14     	; 0x788 <secado+0xb0>
 77a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 77e:	88 23       	and	r24, r24
 780:	19 f0       	breq	.+6      	; 0x788 <secado+0xb0>
			stop_secado();                    // permanece quieto
 782:	0e 94 68 03 	call	0x6d0	; 0x6d0 <stop_secado>
 786:	02 c0       	rjmp	.+4      	; 0x78c <secado+0xb4>
		else
			stop_secado();
 788:	0e 94 68 03 	call	0x6d0	; 0x6d0 <stop_secado>
	}
	so7p = so7;
 78c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <so7>
 790:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <so7p>
	so8p = so8;
 794:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <so8>
 798:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <so8p>
	so9p = so9;
 79c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <so9>
 7a0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <so9p>
 7a4:	08 95       	ret

000007a6 <setup_Parte1>:
////////////////////
////// COMÚN ///////
////////////////////

void setup_Parte1(){
	cli();
 7a6:	f8 94       	cli
	setup_LavHorizontal();
 7a8:	0e 94 be 02 	call	0x57c	; 0x57c <setup_LavHorizontal>
	setup_secado();
 7ac:	0e 94 4d 03 	call	0x69a	; 0x69a <setup_secado>
	sei();
 7b0:	78 94       	sei
 7b2:	08 95       	ret

000007b4 <Parte_1>:
}

void Parte_1(){
	if (enable_check_parte1){
 7b4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <enable_check_parte1>
 7b8:	88 23       	and	r24, r24
 7ba:	31 f0       	breq	.+12     	; 0x7c8 <Parte_1+0x14>
		lavaderoHorizontal();
 7bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lavaderoHorizontal>
		secado();
 7c0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <secado>
		enable_check_parte1 = 0;
 7c4:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <enable_check_parte1>
 7c8:	08 95       	ret

000007ca <setup_barrera>:
void lavadoV_on(){
	modo_lavado=1;
}

void lavadoV_off(){
	modo_lavado=0;
 7ca:	f8 94       	cli
 7cc:	ea e0       	ldi	r30, 0x0A	; 10
 7ce:	f1 e0       	ldi	r31, 0x01	; 1
 7d0:	80 81       	ld	r24, Z
 7d2:	84 60       	ori	r24, 0x04	; 4
 7d4:	80 83       	st	Z, r24
 7d6:	eb e0       	ldi	r30, 0x0B	; 11
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	80 81       	ld	r24, Z
 7dc:	8b 7f       	andi	r24, 0xFB	; 251
 7de:	80 83       	st	Z, r24
 7e0:	84 b1       	in	r24, 0x04	; 4
 7e2:	8e 7f       	andi	r24, 0xFE	; 254
 7e4:	84 b9       	out	0x04, r24	; 4
 7e6:	ed e6       	ldi	r30, 0x6D	; 109
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	84 60       	ori	r24, 0x04	; 4
 7ee:	80 83       	st	Z, r24
 7f0:	e8 e6       	ldi	r30, 0x68	; 104
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	84 60       	ori	r24, 0x04	; 4
 7f8:	80 83       	st	Z, r24
 7fa:	8b b3       	in	r24, 0x1b	; 27
 7fc:	84 60       	ori	r24, 0x04	; 4
 7fe:	8b bb       	out	0x1b, r24	; 27
 800:	78 94       	sei
 802:	05 c0       	rjmp	.+10     	; 0x80e <setup_barrera+0x44>
 804:	eb e0       	ldi	r30, 0x0B	; 11
 806:	f1 e0       	ldi	r31, 0x01	; 1
 808:	80 81       	ld	r24, Z
 80a:	84 60       	ori	r24, 0x04	; 4
 80c:	80 83       	st	Z, r24
 80e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7f0106>
 812:	82 fd       	sbrc	r24, 2
 814:	f7 cf       	rjmp	.-18     	; 0x804 <setup_barrera+0x3a>
 816:	eb e0       	ldi	r30, 0x0B	; 11
 818:	f1 e0       	ldi	r31, 0x01	; 1
 81a:	80 81       	ld	r24, Z
 81c:	8b 7f       	andi	r24, 0xFB	; 251
 81e:	80 83       	st	Z, r24
 820:	08 95       	ret

00000822 <barrera>:
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <modo_barrera>
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	51 f0       	breq	.+20     	; 0x842 <barrera+0x20>
 82e:	18 f0       	brcs	.+6      	; 0x836 <barrera+0x14>
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	21 f1       	breq	.+72     	; 0x87c <barrera+0x5a>
 834:	2e c0       	rjmp	.+92     	; 0x892 <barrera+0x70>
 836:	eb e0       	ldi	r30, 0x0B	; 11
 838:	f1 e0       	ldi	r31, 0x01	; 1
 83a:	80 81       	ld	r24, Z
 83c:	8b 7f       	andi	r24, 0xFB	; 251
 83e:	80 83       	st	Z, r24
 840:	28 c0       	rjmp	.+80     	; 0x892 <barrera+0x70>
 842:	0e 94 cd 00 	call	0x19a	; 0x19a <millis>
 846:	00 91 29 02 	lds	r16, 0x0229	; 0x800229 <cnt_apertura_barrera>
 84a:	10 91 2a 02 	lds	r17, 0x022A	; 0x80022a <cnt_apertura_barrera+0x1>
 84e:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <cnt_apertura_barrera+0x2>
 852:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <cnt_apertura_barrera+0x3>
 856:	dc 01       	movw	r26, r24
 858:	cb 01       	movw	r24, r22
 85a:	80 1b       	sub	r24, r16
 85c:	91 0b       	sbc	r25, r17
 85e:	a2 0b       	sbc	r26, r18
 860:	b3 0b       	sbc	r27, r19
 862:	81 34       	cpi	r24, 0x41	; 65
 864:	96 40       	sbci	r25, 0x06	; 6
 866:	a1 05       	cpc	r26, r1
 868:	b1 05       	cpc	r27, r1
 86a:	98 f0       	brcs	.+38     	; 0x892 <barrera+0x70>
 86c:	eb e0       	ldi	r30, 0x0B	; 11
 86e:	f1 e0       	ldi	r31, 0x01	; 1
 870:	80 81       	ld	r24, Z
 872:	8b 7f       	andi	r24, 0xFB	; 251
 874:	80 83       	st	Z, r24
 876:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <modo_barrera>
 87a:	0b c0       	rjmp	.+22     	; 0x892 <barrera+0x70>
 87c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7f0106>
 880:	82 fd       	sbrc	r24, 2
 882:	07 c0       	rjmp	.+14     	; 0x892 <barrera+0x70>
 884:	eb e0       	ldi	r30, 0x0B	; 11
 886:	f1 e0       	ldi	r31, 0x01	; 1
 888:	80 81       	ld	r24, Z
 88a:	8b 7f       	andi	r24, 0xFB	; 251
 88c:	80 83       	st	Z, r24
 88e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <modo_barrera>
 892:	1f 91       	pop	r17
 894:	0f 91       	pop	r16
 896:	08 95       	ret

00000898 <setup_luz>:
 898:	f8 94       	cli
 89a:	ea e0       	ldi	r30, 0x0A	; 10
 89c:	f1 e0       	ldi	r31, 0x01	; 1
 89e:	80 81       	ld	r24, Z
 8a0:	82 60       	ori	r24, 0x02	; 2
 8a2:	80 83       	st	Z, r24
 8a4:	eb e0       	ldi	r30, 0x0B	; 11
 8a6:	f1 e0       	ldi	r31, 0x01	; 1
 8a8:	80 81       	ld	r24, Z
 8aa:	8d 7f       	andi	r24, 0xFD	; 253
 8ac:	80 83       	st	Z, r24
 8ae:	e1 e2       	ldi	r30, 0x21	; 33
 8b0:	f1 e0       	ldi	r31, 0x01	; 1
 8b2:	80 81       	ld	r24, Z
 8b4:	85 60       	ori	r24, 0x05	; 5
 8b6:	80 83       	st	Z, r24
 8b8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7f0125>
 8bc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7f0124>
 8c0:	81 e4       	ldi	r24, 0x41	; 65
 8c2:	9f e0       	ldi	r25, 0x0F	; 15
 8c4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7f0129>
 8c8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7f0128>
 8cc:	e3 e7       	ldi	r30, 0x73	; 115
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	82 60       	ori	r24, 0x02	; 2
 8d4:	80 83       	st	Z, r24
 8d6:	78 94       	sei
 8d8:	08 95       	ret

000008da <control_LED1>:
 8da:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 8de:	81 11       	cpse	r24, r1
 8e0:	08 c0       	rjmp	.+16     	; 0x8f2 <control_LED1+0x18>
 8e2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <NumCarSecado>
 8e6:	81 11       	cpse	r24, r1
 8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <control_LED1+0x18>
 8ea:	84 e1       	ldi	r24, 0x14	; 20
 8ec:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <aux_parpadeo_LED1>
 8f0:	08 95       	ret
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <aux_parpadeo_LED1>
 8f8:	08 95       	ret

000008fa <__vector_47>:
 8fa:	1f 92       	push	r1
 8fc:	0f 92       	push	r0
 8fe:	0f b6       	in	r0, 0x3f	; 63
 900:	0f 92       	push	r0
 902:	11 24       	eor	r1, r1
 904:	8f 93       	push	r24
 906:	9f 93       	push	r25
 908:	ef 93       	push	r30
 90a:	ff 93       	push	r31
 90c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <timer_ticks>
 910:	8f 5f       	subi	r24, 0xFF	; 255
 912:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <timer_ticks>
 916:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timer_ticks>
 91a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <aux_parpadeo_LED1>
 91e:	98 13       	cpse	r25, r24
 920:	08 c0       	rjmp	.+16     	; 0x932 <__vector_47+0x38>
 922:	eb e0       	ldi	r30, 0x0B	; 11
 924:	f1 e0       	ldi	r31, 0x01	; 1
 926:	80 81       	ld	r24, Z
 928:	82 60       	ori	r24, 0x02	; 2
 92a:	80 83       	st	Z, r24
 92c:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <timer_ticks>
 930:	09 c0       	rjmp	.+18     	; 0x944 <__vector_47+0x4a>
 932:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <timer_ticks>
 936:	81 30       	cpi	r24, 0x01	; 1
 938:	29 f4       	brne	.+10     	; 0x944 <__vector_47+0x4a>
 93a:	eb e0       	ldi	r30, 0x0B	; 11
 93c:	f1 e0       	ldi	r31, 0x01	; 1
 93e:	80 81       	ld	r24, Z
 940:	8d 7f       	andi	r24, 0xFD	; 253
 942:	80 83       	st	Z, r24
 944:	ff 91       	pop	r31
 946:	ef 91       	pop	r30
 948:	9f 91       	pop	r25
 94a:	8f 91       	pop	r24
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	0f 90       	pop	r0
 952:	1f 90       	pop	r1
 954:	18 95       	reti

00000956 <setup_lv>:
 956:	e7 e0       	ldi	r30, 0x07	; 7
 958:	f1 e0       	ldi	r31, 0x01	; 1
 95a:	80 81       	ld	r24, Z
 95c:	80 64       	ori	r24, 0x40	; 64
 95e:	80 83       	st	Z, r24
 960:	e8 e0       	ldi	r30, 0x08	; 8
 962:	f1 e0       	ldi	r31, 0x01	; 1
 964:	80 81       	ld	r24, Z
 966:	8f 7b       	andi	r24, 0xBF	; 191
 968:	80 83       	st	Z, r24
 96a:	08 95       	ret

0000096c <lavadovertical>:
}

void lavadovertical(){
	switch (modo_lavado){
 96c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <modo_lavado>
 970:	88 23       	and	r24, r24
 972:	19 f0       	breq	.+6      	; 0x97a <lavadovertical+0xe>
 974:	81 30       	cpi	r24, 0x01	; 1
 976:	39 f0       	breq	.+14     	; 0x986 <lavadovertical+0x1a>
 978:	08 95       	ret
		case 0:		//lavado apagado
		clearBit(REG_M2_en_PORT, PIN_M2_en_PORT); // Apago motor lavado, nos aseguramos que para
 97a:	e8 e0       	ldi	r30, 0x08	; 8
 97c:	f1 e0       	ldi	r31, 0x01	; 1
 97e:	80 81       	ld	r24, Z
 980:	8f 7b       	andi	r24, 0xBF	; 191
 982:	80 83       	st	Z, r24
		break;
 984:	08 95       	ret
		
		case 1:		//lavado encencido
		setBit(REG_M2_en_PORT, PIN_M2_en_PORT);
 986:	e8 e0       	ldi	r30, 0x08	; 8
 988:	f1 e0       	ldi	r31, 0x01	; 1
 98a:	80 81       	ld	r24, Z
 98c:	80 64       	ori	r24, 0x40	; 64
 98e:	80 83       	st	Z, r24
 990:	08 95       	ret

00000992 <setup_Parte2>:
//////////////////////////////////////////////
//////////////////	 COMÚN 	//////////////////
//////////////////////////////////////////////

void setup_Parte2(void){
	setup_barrera();
 992:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setup_barrera>
	setup_luz();
 996:	0e 94 4c 04 	call	0x898	; 0x898 <setup_luz>
	setup_lv();
 99a:	0e 94 ab 04 	call	0x956	; 0x956 <setup_lv>
 99e:	08 95       	ret

000009a0 <Parte_2>:
}

void Parte_2(void){
	barrera();
 9a0:	0e 94 11 04 	call	0x822	; 0x822 <barrera>
	control_LED1();
 9a4:	0e 94 6d 04 	call	0x8da	; 0x8da <control_LED1>
	lavadovertical();	
 9a8:	0e 94 b6 04 	call	0x96c	; 0x96c <lavadovertical>
 9ac:	08 95       	ret

000009ae <setupCinta>:
////////////////////////////////
////// CINTA DE ARRASTRE ///////
////////////////////////////////

void setupCinta(){	//Inicialización
	setBit(REG_M6_di_DDR, PIN_M6_di_DDR); //Configurar el pin de dirección M6 como salida
 9ae:	ea e0       	ldi	r30, 0x0A	; 10
 9b0:	f1 e0       	ldi	r31, 0x01	; 1
 9b2:	80 81       	ld	r24, Z
 9b4:	81 60       	ori	r24, 0x01	; 1
 9b6:	80 83       	st	Z, r24
	setBit(REG_M6_en_DDR, PIN_M6_en_DDR); //Configurar el pin M6 en como salida
 9b8:	84 b1       	in	r24, 0x04	; 4
 9ba:	80 68       	ori	r24, 0x80	; 128
 9bc:	84 b9       	out	0x04, r24	; 4
	setBit(REG_M6_di_PORT, PIN_M6_di_PORT); //Ajustar el sentido de giro de M6 a la derecha
 9be:	eb e0       	ldi	r30, 0x0B	; 11
 9c0:	f1 e0       	ldi	r31, 0x01	; 1
 9c2:	80 81       	ld	r24, Z
 9c4:	81 60       	ori	r24, 0x01	; 1
 9c6:	80 83       	st	Z, r24
 9c8:	08 95       	ret

000009ca <moveCinta>:
}

void moveCinta(){
	setBit(REG_M6_en_PORT, PIN_M6_en_PORT);
 9ca:	85 b1       	in	r24, 0x05	; 5
 9cc:	80 68       	ori	r24, 0x80	; 128
 9ce:	85 b9       	out	0x05, r24	; 5
 9d0:	08 95       	ret

000009d2 <stopCinta>:
}

void stopCinta(){
	clearBit(REG_M6_en_PORT, PIN_M6_en_PORT);
 9d2:	85 b1       	in	r24, 0x05	; 5
 9d4:	8f 77       	andi	r24, 0x7F	; 127
 9d6:	85 b9       	out	0x05, r24	; 5
 9d8:	08 95       	ret

000009da <cinta>:
}

void cinta(){	//Loop
	if (NumCarLavado == 0 && NumCarSecado == 0){	// Ningún vehículo
 9da:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 9de:	81 11       	cpse	r24, r1
 9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <cinta+0x16>
 9e2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <NumCarSecado>
 9e6:	81 11       	cpse	r24, r1
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <cinta+0x16>
		stopCinta();
 9ea:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <stopCinta>
 9ee:	08 95       	ret
	}
	else{	// Algún vehículo
		moveCinta();
 9f0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <moveCinta>
 9f4:	08 95       	ret

000009f6 <setup_semaforo>:
///////////////////////////////////////
//////////	SEMÁFORO LEDs	 //////////
///////////////////////////////////////

void setup_semaforo(){ //Inicialización Semáforo: LED4 y LED5
	setBit(REG_LED_DDR, PIN_L4_DDR);	// GREEN: Establecer LED 4 pin como salida
 9f6:	ea e0       	ldi	r30, 0x0A	; 10
 9f8:	f1 e0       	ldi	r31, 0x01	; 1
 9fa:	80 81       	ld	r24, Z
 9fc:	88 60       	ori	r24, 0x08	; 8
 9fe:	80 83       	st	Z, r24
	setBit(	REG_LED_DDR, PIN_L5_DDR);	// RED: Establecer LED 5 pin como salida
 a00:	80 81       	ld	r24, Z
 a02:	80 62       	ori	r24, 0x20	; 32
 a04:	80 83       	st	Z, r24
 a06:	08 95       	ret

00000a08 <semaforo>:
}

void semaforo(){ //LED_4_5
	if (NumCarLavado == 0 && NumCarSecado == 0){	// Ningún vehículo
 a08:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <NumCarLavado>
 a0c:	81 11       	cpse	r24, r1
 a0e:	0d c0       	rjmp	.+26     	; 0xa2a <semaforo+0x22>
 a10:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <NumCarSecado>
 a14:	81 11       	cpse	r24, r1
 a16:	09 c0       	rjmp	.+18     	; 0xa2a <semaforo+0x22>
		clearBit(REG_LED_PORT, PIN_L4_PORT);	// GREEN: Apagado
 a18:	eb e0       	ldi	r30, 0x0B	; 11
 a1a:	f1 e0       	ldi	r31, 0x01	; 1
 a1c:	80 81       	ld	r24, Z
 a1e:	87 7f       	andi	r24, 0xF7	; 247
 a20:	80 83       	st	Z, r24
		clearBit(REG_LED_PORT, PIN_L5_PORT);	// RED: Apagado
 a22:	80 81       	ld	r24, Z
 a24:	8f 7d       	andi	r24, 0xDF	; 223
 a26:	80 83       	st	Z, r24
 a28:	08 95       	ret
	}
	else{	// Algún vehículo
		
		if(isBitSet(REG_SOB_PIN, PIN_SO10_PIN) && isClrSet(REG_SOD_PIN, PIN_SO11_PIN) && isClrSet(REG_SOB_PIN, PIN_SO12_PIN)){
 a2a:	1d 9b       	sbis	0x03, 5	; 3
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <semaforo+0x40>
 a2e:	4d 99       	sbic	0x09, 5	; 9
 a30:	0b c0       	rjmp	.+22     	; 0xa48 <semaforo+0x40>
 a32:	1a 99       	sbic	0x03, 2	; 3
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <semaforo+0x40>
			// No hay coche liberado de la cinta (SO10 && not_SO11 && not_SO12)
			clearBit(REG_LED_PORT, PIN_L4_PORT);	// GREEN: Apagado
 a36:	eb e0       	ldi	r30, 0x0B	; 11
 a38:	f1 e0       	ldi	r31, 0x01	; 1
 a3a:	80 81       	ld	r24, Z
 a3c:	87 7f       	andi	r24, 0xF7	; 247
 a3e:	80 83       	st	Z, r24
			setBit(REG_LED_PORT, PIN_L5_PORT);		// RED: Encendido
 a40:	80 81       	ld	r24, Z
 a42:	80 62       	ori	r24, 0x20	; 32
 a44:	80 83       	st	Z, r24
 a46:	08 95       	ret
		}
		else {
			// Coche liberado de la cinta
			setBit(REG_LED_PORT, PIN_L4_PORT);		// GREEN: Encendido
 a48:	eb e0       	ldi	r30, 0x0B	; 11
 a4a:	f1 e0       	ldi	r31, 0x01	; 1
 a4c:	80 81       	ld	r24, Z
 a4e:	88 60       	ori	r24, 0x08	; 8
 a50:	80 83       	st	Z, r24
			clearBit(REG_LED_PORT, PIN_L5_PORT);	// RED: Apagado
 a52:	80 81       	ld	r24, Z
 a54:	8f 7d       	andi	r24, 0xDF	; 223
 a56:	80 83       	st	Z, r24
 a58:	08 95       	ret

00000a5a <setup_ParadaEmergencia>:
////// PARADA DE EMERGENCIA ///////
///////////////////////////////////

void setup_ParadaEmergencia(){ // SW4 al soltar boton
	
	setBit(EICRA,ISC00); // Interrupción flanco subida
 a5a:	e9 e6       	ldi	r30, 0x69	; 105
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	81 60       	ori	r24, 0x01	; 1
 a62:	80 83       	st	Z, r24
	setBit(EICRA,ISC01);
 a64:	80 81       	ld	r24, Z
 a66:	82 60       	ori	r24, 0x02	; 2
 a68:	80 83       	st	Z, r24
	
	setBit(EIMSK,INT0); // Activo mascara interrupción
 a6a:	8d b3       	in	r24, 0x1d	; 29
 a6c:	81 60       	ori	r24, 0x01	; 1
 a6e:	8d bb       	out	0x1d, r24	; 29
 a70:	08 95       	ret

00000a72 <ParadaEmergencia>:
}

void ParadaEmergencia() {
	setStop();
 a72:	0e 94 91 00 	call	0x122	; 0x122 <setStop>
 a76:	08 95       	ret

00000a78 <setup_Parte3>:
///////////////////////////////
///////		 COMÚN		///////
///////////////////////////////

void setup_Parte3(){
	cli();
 a78:	f8 94       	cli
	setupCinta();
 a7a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <setupCinta>
	setup_semaforo();
 a7e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <setup_semaforo>
	setup_ParadaEmergencia();
 a82:	0e 94 2d 05 	call	0xa5a	; 0xa5a <setup_ParadaEmergencia>
	sei();
 a86:	78 94       	sei
 a88:	08 95       	ret

00000a8a <Parte_3>:
}

void Parte_3(){	//loop
	cinta();
 a8a:	0e 94 ed 04 	call	0x9da	; 0x9da <cinta>
	semaforo();
 a8e:	0e 94 04 05 	call	0xa08	; 0xa08 <semaforo>
 a92:	08 95       	ret

00000a94 <__udivmodsi4>:
 a94:	a1 e2       	ldi	r26, 0x21	; 33
 a96:	1a 2e       	mov	r1, r26
 a98:	aa 1b       	sub	r26, r26
 a9a:	bb 1b       	sub	r27, r27
 a9c:	fd 01       	movw	r30, r26
 a9e:	0d c0       	rjmp	.+26     	; 0xaba <__udivmodsi4_ep>

00000aa0 <__udivmodsi4_loop>:
 aa0:	aa 1f       	adc	r26, r26
 aa2:	bb 1f       	adc	r27, r27
 aa4:	ee 1f       	adc	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	a2 17       	cp	r26, r18
 aaa:	b3 07       	cpc	r27, r19
 aac:	e4 07       	cpc	r30, r20
 aae:	f5 07       	cpc	r31, r21
 ab0:	20 f0       	brcs	.+8      	; 0xaba <__udivmodsi4_ep>
 ab2:	a2 1b       	sub	r26, r18
 ab4:	b3 0b       	sbc	r27, r19
 ab6:	e4 0b       	sbc	r30, r20
 ab8:	f5 0b       	sbc	r31, r21

00000aba <__udivmodsi4_ep>:
 aba:	66 1f       	adc	r22, r22
 abc:	77 1f       	adc	r23, r23
 abe:	88 1f       	adc	r24, r24
 ac0:	99 1f       	adc	r25, r25
 ac2:	1a 94       	dec	r1
 ac4:	69 f7       	brne	.-38     	; 0xaa0 <__udivmodsi4_loop>
 ac6:	60 95       	com	r22
 ac8:	70 95       	com	r23
 aca:	80 95       	com	r24
 acc:	90 95       	com	r25
 ace:	9b 01       	movw	r18, r22
 ad0:	ac 01       	movw	r20, r24
 ad2:	bd 01       	movw	r22, r26
 ad4:	cf 01       	movw	r24, r30
 ad6:	08 95       	ret

00000ad8 <_exit>:
 ad8:	f8 94       	cli

00000ada <__stop_program>:
 ada:	ff cf       	rjmp	.-2      	; 0xada <__stop_program>
